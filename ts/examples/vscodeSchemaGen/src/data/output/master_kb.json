[
  {
    "command": "acceptSelectedSuggestionOnEnter"
  },
  {
    "command": "acceptSnippet"
  },
  {
    "command": "accessibility.announcement.help"
  },
  {
    "command": "actions.findWithSelection"
  },
  {
    "command": "addRootFolder"
  },
  {
    "command": "breadcrumbs.toggle"
  },
  {
    "command": "breadcrumbs.toggleFromEditorTitle"
  },
  {
    "command": "callStack.collapse"
  },
  {
    "command": "callStackWidget.goToFile"
  },
  {
    "command": "changeEditorIndentation5"
  },
  {
    "command": "chat.inlineResourceAnchor.addFileToChat"
  },
  {
    "command": "chat.inlineSymbolAnchor.goToDefinition"
  },
  {
    "command": "chat.inlineSymbolAnchor.goToReferences"
  },
  {
    "command": "chatEditing.acceptAllFiles"
  },
  {
    "command": "chatEditing.acceptFile"
  },
  {
    "command": "chatEditing.discardAllFiles"
  },
  {
    "command": "chatEditing.discardFile"
  },
  {
    "command": "chatEditing.openDiffs"
  },
  {
    "command": "chatEditing.openFile"
  },
  {
    "command": "chatEditing.startSession"
  },
  {
    "command": "chatEditing.stopSession"
  },
  {
    "command": "cleanSearchEditorState"
  },
  {
    "command": "closeReferenceSearchEditor"
  },
  {
    "command": "coda-shell.start"
  },
  {
    "command": "codelens.showLensesInCurrentLine"
  },
  {
    "command": "columnSelect"
  },
  {
    "command": "comments.collapse"
  },
  {
    "command": "comments.expand"
  },
  {
    "command": "comments.reply"
  },
  {
    "command": "compareFiles"
  },
  {
    "command": "compareSelected"
  },
  {
    "command": "compositionEnd"
  },
  {
    "command": "compositionStart"
  },
  {
    "command": "compositionType"
  },
  {
    "command": "copilot-chat.focus"
  },
  {
    "command": "copilot-chat.resetViewLocation"
  },
  {
    "command": "createCursor"
  },
  {
    "command": "cursorLineEnd"
  },
  {
    "command": "cursorLineEndSelect"
  },
  {
    "command": "cursorLineStart"
  },
  {
    "command": "cursorLineStartSelect"
  },
  {
    "command": "cursorRedo"
  },
  {
    "command": "cursorWordEndLeft"
  },
  {
    "command": "cursorWordEndLeftSelect"
  },
  {
    "command": "cursorWordPartLeft"
  },
  {
    "command": "cursorWordPartLeftSelect"
  },
  {
    "command": "cursorWordPartRight"
  },
  {
    "command": "cursorWordPartRightSelect"
  },
  {
    "command": "cursorWordPartStartLeft"
  },
  {
    "command": "cursorWordPartStartLeftSelect"
  },
  {
    "command": "cursorWordRight"
  },
  {
    "command": "cursorWordRightSelect"
  },
  {
    "command": "cursorWordStartLeft"
  },
  {
    "command": "cursorWordStartLeftSelect"
  },
  {
    "command": "cursorWordStartRight"
  },
  {
    "command": "cursorWordStartRightSelect"
  },
  {
    "command": "cut"
  },
  {
    "command": "debug.action.openDisassemblyView"
  },
  {
    "command": "debug.action.toggleDisassemblyViewSourceCode"
  },
  {
    "command": "debug.addConfiguration"
  },
  {
    "command": "debug.addToWatchExpressions"
  },
  {
    "command": "debug.breakWhenValueChanges"
  },
  {
    "command": "debug.breakWhenValueIsAccessed"
  },
  {
    "command": "debug.breakWhenValueIsRead"
  },
  {
    "command": "debug.collapseRepl"
  },
  {
    "command": "debug.copyEvaluatePath"
  },
  {
    "command": "debug.copyStackTrace"
  },
  {
    "command": "debug.editBreakpoint"
  },
  {
    "command": "debug.editBreakpointMode"
  },
  {
    "command": "debug.editFunctionBreakpoint"
  },
  {
    "command": "debug.editFunctionBreakpointHitCount"
  },
  {
    "command": "debug.enableOrDisableBreakpoint"
  },
  {
    "command": "debug.installAdditionalDebuggers"
  },
  {
    "command": "debug.jumpToCursor"
  },
  {
    "command": "debug.replCopy"
  },
  {
    "command": "debug.replPaste"
  },
  {
    "command": "debug.setWatchExpression"
  },
  {
    "command": "debug.startFromConfig"
  },
  {
    "command": "debug.toggleReplIgnoreFocus"
  },
  {
    "command": "debugpy.clearCacheAndReload"
  },
  {
    "command": "debugpy.debugInTerminal"
  },
  {
    "command": "debugpy.debugUsingLaunchConfig"
  },
  {
    "command": "debugpy.reportIssue"
  },
  {
    "command": "debugpy.viewOutput"
  },
  {
    "command": "default:compositionEnd"
  },
  {
    "command": "default:compositionStart"
  },
  {
    "command": "default:compositionType"
  },
  {
    "command": "default:cut"
  },
  {
    "command": "default:paste"
  },
  {
    "command": "default:redo"
  },
  {
    "command": "default:replacePreviousChar"
  },
  {
    "command": "default:type"
  },
  {
    "command": "default:undo"
  },
  {
    "command": "deleteAllLeft"
  },
  {
    "command": "deleteAllRight"
  },
  {
    "command": "deleteInsideWord"
  },
  {
    "command": "deleteWordEndLeft"
  },
  {
    "command": "deleteWordEndRight"
  },
  {
    "command": "deleteWordPartLeft"
  },
  {
    "command": "deleteWordPartRight"
  },
  {
    "command": "deleteWordStartLeft"
  },
  {
    "command": "deleteWordStartRight"
  },
  {
    "command": "detailsContainers.focus"
  },
  {
    "command": "detailsContainers.resetViewLocation"
  },
  {
    "command": "devVolumes.focus"
  },
  {
    "command": "devVolumes.resetViewLocation"
  },
  {
    "command": "developer.showCurrentFileAsReleaseNotes"
  },
  {
    "command": "diffEditor.collapseAllUnchangedRegions"
  },
  {
    "command": "diffEditor.revert"
  },
  {
    "command": "diffEditor.showAllUnchangedRegions"
  },
  {
    "command": "diffEditor.switchSide"
  },
  {
    "command": "diffEditor.toggleCollapseUnchangedRegions"
  },
  {
    "command": "diffEditor.toggleShowMovedCodeBlocks"
  },
  {
    "command": "diffEditor.toggleUseInlineViewWhenSpaceIsLimited"
  },
  {
    "command": "dockerContainers.focus"
  },
  {
    "command": "dockerContainers.removeView"
  },
  {
    "command": "dockerContainers.resetViewLocation"
  },
  {
    "command": "dockerContainers.toggleVisibility"
  },
  {
    "command": "dockerImages.focus"
  },
  {
    "command": "dockerImages.removeView"
  },
  {
    "command": "dockerImages.resetViewLocation"
  },
  {
    "command": "dockerImages.toggleVisibility"
  },
  {
    "command": "dockerNetworks.focus"
  },
  {
    "command": "dockerNetworks.removeView"
  },
  {
    "command": "dockerNetworks.resetViewLocation"
  },
  {
    "command": "dockerNetworks.toggleVisibility"
  },
  {
    "command": "dockerRegistries.focus"
  },
  {
    "command": "dockerRegistries.removeView"
  },
  {
    "command": "dockerRegistries.resetViewLocation"
  },
  {
    "command": "dockerRegistries.toggleVisibility"
  },
  {
    "command": "dockerVolumes.focus"
  },
  {
    "command": "dockerVolumes.removeView"
  },
  {
    "command": "dockerVolumes.resetViewLocation"
  },
  {
    "command": "dockerVolumes.toggleVisibility"
  },
  {
    "command": "editor.action.addCursorsToBottom"
  },
  {
    "command": "editor.action.addCursorsToTop"
  },
  {
    "command": "editor.action.addSelectionToPreviousFindMatch"
  },
  {
    "command": "editor.action.changeTabDisplaySize"
  },
  {
    "command": "editor.action.clipboardCopyWithSyntaxHighlightingAction"
  },
  {
    "command": "editor.action.debugEditorGpuRenderer"
  },
  {
    "command": "editor.action.decreaseHoverVerbosityLevel"
  },
  {
    "command": "editor.action.detectIndentation"
  },
  {
    "command": "editor.action.diffReview.next"
  },
  {
    "command": "editor.action.diffReview.prev"
  },
  {
    "command": "editor.action.duplicateSelection"
  },
  {
    "command": "editor.action.findReferences"
  },
  {
    "command": "editor.action.fixAll"
  },
  {
    "command": "editor.action.focusNextCursor"
  },
  {
    "command": "editor.action.focusPreviousCursor"
  },
  {
    "command": "editor.action.focusStickyScroll"
  },
  {
    "command": "editor.action.fontZoomIn"
  },
  {
    "command": "editor.action.fontZoomOut"
  },
  {
    "command": "editor.action.fontZoomReset"
  },
  {
    "command": "editor.action.forceRetokenize"
  },
  {
    "command": "editor.action.format"
  },
  {
    "command": "editor.action.formatChanges"
  },
  {
    "command": "editor.action.formatDocument.multiple"
  },
  {
    "command": "editor.action.formatSelection.multiple"
  },
  {
    "command": "editor.action.goToDeclaration"
  },
  {
    "command": "editor.action.goToMatchFindAction"
  },
  {
    "command": "editor.action.goToSelectionAnchor"
  },
  {
    "command": "editor.action.goToTypeDefinition"
  },
  {
    "command": "editor.action.increaseHoverVerbosityLevel"
  },
  {
    "command": "editor.action.indentUsingSpaces"
  },
  {
    "command": "editor.action.indentUsingTabs"
  },
  {
    "command": "editor.action.indentationToSpaces"
  },
  {
    "command": "editor.action.indentationToTabs"
  },
  {
    "command": "editor.action.inlineSuggest.acceptNextLine"
  },
  {
    "command": "editor.action.inlineSuggest.toggleAlwaysShowToolbar"
  },
  {
    "command": "editor.action.insertSnippet"
  },
  {
    "command": "editor.action.inspectTMScopes"
  },
  {
    "command": "editor.action.joinLines"
  },
  {
    "command": "editor.action.measureExtHostLatency"
  },
  {
    "command": "editor.action.moveCarretLeftAction"
  },
  {
    "command": "editor.action.moveCarretRightAction"
  },
  {
    "command": "editor.action.moveSelectionToPreviousFindMatch"
  },
  {
    "command": "editor.action.openDeclarationToTheSide"
  },
  {
    "command": "editor.action.openLink"
  },
  {
    "command": "editor.action.pasteAs"
  },
  {
    "command": "editor.action.pasteAsText"
  },
  {
    "command": "editor.action.peekDeclaration"
  },
  {
    "command": "editor.action.peekTypeDefinition"
  },
  {
    "command": "editor.action.previewDeclaration"
  },
  {
    "command": "editor.action.referenceSearch.trigger"
  },
  {
    "command": "editor.action.reindentlines"
  },
  {
    "command": "editor.action.reindentselectedlines"
  },
  {
    "command": "editor.action.removeDuplicateLines"
  },
  {
    "command": "editor.action.resetSuggestSize"
  },
  {
    "command": "editor.action.revealDeclaration"
  },
  {
    "command": "editor.action.selectToBracket"
  },
  {
    "command": "editor.action.showDefinitionPreviewHover"
  },
  {
    "command": "editor.action.showOrFocusStandaloneColorPicker"
  },
  {
    "command": "editor.action.showReferences"
  },
  {
    "command": "editor.action.showSnippets"
  },
  {
    "command": "editor.action.smartSelect.grow"
  },
  {
    "command": "editor.action.sortLinesAscending"
  },
  {
    "command": "editor.action.sortLinesDescending"
  },
  {
    "command": "editor.action.sourceAction"
  },
  {
    "command": "editor.action.startDebugTextMate"
  },
  {
    "command": "editor.action.surroundWithSnippet"
  },
  {
    "command": "editor.action.toggleColumnSelection"
  },
  {
    "command": "editor.action.toggleMinimap"
  },
  {
    "command": "editor.action.toggleRenderControlCharacter"
  },
  {
    "command": "editor.action.toggleRenderWhitespace"
  },
  {
    "command": "editor.action.toggleStickyScroll"
  },
  {
    "command": "editor.action.transformToCamelcase"
  },
  {
    "command": "editor.action.transformToKebabcase"
  },
  {
    "command": "editor.action.transformToLowercase"
  },
  {
    "command": "editor.action.transformToPascalcase"
  },
  {
    "command": "editor.action.transformToSnakecase"
  },
  {
    "command": "editor.action.transformToTitlecase"
  },
  {
    "command": "editor.action.transformToUppercase"
  },
  {
    "command": "editor.action.transpose"
  },
  {
    "command": "editor.action.transposeLetters"
  },
  {
    "command": "editor.action.unicodeHighlight.disableHighlightingOfAmbiguousCharacters"
  },
  {
    "command": "editor.action.unicodeHighlight.disableHighlightingOfInvisibleCharacters"
  },
  {
    "command": "editor.action.unicodeHighlight.disableHighlightingOfNonBasicAsciiCharacters"
  },
  {
    "command": "editor.action.unicodeHighlight.showExcludeOptions"
  },
  {
    "command": "editor.action.wordHighlight.trigger"
  },
  {
    "command": "editor.actions.findWithArgs"
  },
  {
    "command": "editor.debug.action.addLogPoint"
  },
  {
    "command": "editor.debug.action.conditionalBreakpoint"
  },
  {
    "command": "editor.debug.action.editBreakpoint"
  },
  {
    "command": "editor.debug.action.goToNextBreakpoint"
  },
  {
    "command": "editor.debug.action.goToPreviousBreakpoint"
  },
  {
    "command": "editor.debug.action.runToCursor"
  },
  {
    "command": "editor.debug.action.selectionToRepl"
  },
  {
    "command": "editor.debug.action.selectionToWatch"
  },
  {
    "command": "editor.debug.action.stepIntoTargets"
  },
  {
    "command": "editor.debug.action.triggerByBreakpoint"
  },
  {
    "command": "editor.emmet.action.balanceIn"
  },
  {
    "command": "editor.emmet.action.balanceOut"
  },
  {
    "command": "editor.emmet.action.decrementNumberByOne"
  },
  {
    "command": "editor.emmet.action.decrementNumberByOneTenth"
  },
  {
    "command": "editor.emmet.action.decrementNumberByTen"
  },
  {
    "command": "editor.emmet.action.evaluateMathExpression"
  },
  {
    "command": "editor.emmet.action.incrementNumberByOne"
  },
  {
    "command": "editor.emmet.action.incrementNumberByOneTenth"
  },
  {
    "command": "editor.emmet.action.incrementNumberByTen"
  },
  {
    "command": "editor.emmet.action.matchTag"
  },
  {
    "command": "editor.emmet.action.mergeLines"
  },
  {
    "command": "editor.emmet.action.nextEditPoint"
  },
  {
    "command": "editor.emmet.action.prevEditPoint"
  },
  {
    "command": "editor.emmet.action.reflectCSSValue"
  },
  {
    "command": "editor.emmet.action.removeTag"
  },
  {
    "command": "editor.emmet.action.selectNextItem"
  },
  {
    "command": "editor.emmet.action.selectPrevItem"
  },
  {
    "command": "editor.emmet.action.splitJoinTag"
  },
  {
    "command": "editor.emmet.action.toggleComment"
  },
  {
    "command": "editor.emmet.action.updateImageSize"
  },
  {
    "command": "editor.emmet.action.updateTag"
  },
  {
    "command": "editor.emmet.action.wrapWithAbbreviation"
  },
  {
    "command": "editor.gotoNextFold"
  },
  {
    "command": "editor.gotoParentFold"
  },
  {
    "command": "editor.gotoPreviousFold"
  },
  {
    "command": "editor.inlayHints.Reset"
  },
  {
    "command": "editor.showTypeHierarchy"
  },
  {
    "command": "editor.toggleImportFold"
  },
  {
    "command": "emmet.expandAbbreviation"
  },
  {
    "command": "explorer.download"
  },
  {
    "command": "explorer.newFile"
  },
  {
    "command": "explorer.newFolder"
  },
  {
    "command": "explorer.openWith"
  },
  {
    "command": "explorer.upload"
  },
  {
    "command": "extension.bisect.next"
  },
  {
    "command": "extension.bisect.start"
  },
  {
    "command": "extension.bisect.stop"
  },
  {
    "command": "extension.js-debug.addCustomBreakpoints"
  },
  {
    "command": "extension.js-debug.addXHRBreakpoints"
  },
  {
    "command": "extension.js-debug.callers.add"
  },
  {
    "command": "extension.js-debug.callers.goToCaller"
  },
  {
    "command": "extension.js-debug.callers.gotToTarget"
  },
  {
    "command": "extension.js-debug.callers.remove"
  },
  {
    "command": "extension.js-debug.callers.removeAll"
  },
  {
    "command": "extension.js-debug.createDebuggerTerminal"
  },
  {
    "command": "extension.js-debug.createDiagnostics"
  },
  {
    "command": "extension.js-debug.debugLink"
  },
  {
    "command": "extension.js-debug.disableSourceMapStepping"
  },
  {
    "command": "extension.js-debug.editXHRBreakpoints"
  },
  {
    "command": "extension.js-debug.enableSourceMapStepping"
  },
  {
    "command": "extension.js-debug.getDiagnosticLogs"
  },
  {
    "command": "extension.js-debug.network.clear"
  },
  {
    "command": "extension.js-debug.network.copyUri"
  },
  {
    "command": "extension.js-debug.network.openBody"
  },
  {
    "command": "extension.js-debug.network.openBodyInHex"
  },
  {
    "command": "extension.js-debug.network.replayXHR"
  },
  {
    "command": "extension.js-debug.network.viewRequest"
  },
  {
    "command": "extension.js-debug.npmScript"
  },
  {
    "command": "extension.js-debug.openEdgeDevTools"
  },
  {
    "command": "extension.js-debug.prettyPrint"
  },
  {
    "command": "extension.js-debug.removeAllCustomBreakpoints"
  },
  {
    "command": "extension.js-debug.removeXHRBreakpoint"
  },
  {
    "command": "extension.js-debug.revealPage"
  },
  {
    "command": "extension.js-debug.startProfile"
  },
  {
    "command": "extension.js-debug.stopProfile"
  },
  {
    "command": "extension.js-debug.toggleSkippingFile"
  },
  {
    "command": "extension.jsProfileVisualizer.table.clearCodeLenses"
  },
  {
    "command": "extension.node-debug.toggleAutoAttach"
  },
  {
    "command": "extension.open"
  },
  {
    "command": "extension.pwa-node-debug.attachNodeProcess"
  },
  {
    "command": "extensions.actions.searchByCategory.AI"
  },
  {
    "command": "extensions.actions.searchByCategory.Azure"
  },
  {
    "command": "extensions.actions.searchByCategory.Chat"
  },
  {
    "command": "extensions.actions.searchByCategory.Data Science"
  },
  {
    "command": "extensions.actions.searchByCategory.Debuggers"
  },
  {
    "command": "extensions.actions.searchByCategory.Education"
  },
  {
    "command": "extensions.actions.searchByCategory.Extension Packs"
  },
  {
    "command": "extensions.actions.searchByCategory.Formatters"
  },
  {
    "command": "extensions.actions.searchByCategory.Keymaps"
  },
  {
    "command": "extensions.actions.searchByCategory.Language Packs"
  },
  {
    "command": "extensions.actions.searchByCategory.Linters"
  },
  {
    "command": "extensions.actions.searchByCategory.Machine Learning"
  },
  {
    "command": "extensions.actions.searchByCategory.Notebooks"
  },
  {
    "command": "extensions.actions.searchByCategory.Other"
  },
  {
    "command": "extensions.actions.searchByCategory.Programming Languages"
  },
  {
    "command": "extensions.actions.searchByCategory.SCM Providers"
  },
  {
    "command": "extensions.actions.searchByCategory.Snippets"
  },
  {
    "command": "extensions.actions.searchByCategory.Testing"
  },
  {
    "command": "extensions.actions.searchByCategory.Themes"
  },
  {
    "command": "extensions.actions.searchByCategory.Visualization"
  },
  {
    "command": "extensions.filter.featured"
  },
  {
    "command": "extensions.recommendedList.focus"
  },
  {
    "command": "extensions.recommendedList.resetViewLocation"
  },
  {
    "command": "extensions.sort.installs"
  },
  {
    "command": "extensions.sort.name"
  },
  {
    "command": "extensions.sort.publishedDate"
  },
  {
    "command": "extensions.sort.rating"
  },
  {
    "command": "extensions.sort.updateDate"
  },
  {
    "command": "files.openTimeline"
  },
  {
    "command": "files.participants.resetChoice"
  },
  {
    "command": "filesExplorer.findInWorkspace"
  },
  {
    "command": "focusAndAcceptSuggestion"
  },
  {
    "command": "getContextKeyInfo"
  },
  {
    "command": "git-base.api.getRemoteSources"
  },
  {
    "command": "git._syncAll"
  },
  {
    "command": "git.acceptMerge"
  },
  {
    "command": "git.addRemote"
  },
  {
    "command": "git.api.getRemoteSources"
  },
  {
    "command": "git.api.getRepositories"
  },
  {
    "command": "git.api.getRepositoryState"
  },
  {
    "command": "git.branch"
  },
  {
    "command": "git.branchFrom"
  },
  {
    "command": "git.checkout"
  },
  {
    "command": "git.checkoutDetached"
  },
  {
    "command": "git.checkoutRefDetached"
  },
  {
    "command": "git.cherryPick"
  },
  {
    "command": "git.cherryPickRef"
  },
  {
    "command": "git.clean"
  },
  {
    "command": "git.cleanAll"
  },
  {
    "command": "git.cleanAllTracked"
  },
  {
    "command": "git.cleanAllUntracked"
  },
  {
    "command": "git.clone"
  },
  {
    "command": "git.cloneRecursive"
  },
  {
    "command": "git.close"
  },
  {
    "command": "git.closeAllDiffEditors"
  },
  {
    "command": "git.closeAllUnmodifiedEditors"
  },
  {
    "command": "git.closeOtherRepositories"
  },
  {
    "command": "git.commit"
  },
  {
    "command": "git.commitAll"
  },
  {
    "command": "git.commitAllAmend"
  },
  {
    "command": "git.commitAllAmendNoVerify"
  },
  {
    "command": "git.commitAllNoVerify"
  },
  {
    "command": "git.commitAllSigned"
  },
  {
    "command": "git.commitAllSignedNoVerify"
  },
  {
    "command": "git.commitAmend"
  },
  {
    "command": "git.commitAmendNoVerify"
  },
  {
    "command": "git.commitEmpty"
  },
  {
    "command": "git.commitEmptyNoVerify"
  },
  {
    "command": "git.commitMessageAccept"
  },
  {
    "command": "git.commitMessageDiscard"
  },
  {
    "command": "git.commitNoVerify"
  },
  {
    "command": "git.commitSigned"
  },
  {
    "command": "git.commitSignedNoVerify"
  },
  {
    "command": "git.commitStaged"
  },
  {
    "command": "git.commitStagedAmend"
  },
  {
    "command": "git.commitStagedAmendNoVerify"
  },
  {
    "command": "git.commitStagedNoVerify"
  },
  {
    "command": "git.commitStagedSigned"
  },
  {
    "command": "git.commitStagedSignedNoVerify"
  },
  {
    "command": "git.continueInLocalClone"
  },
  {
    "command": "git.copyCommitId"
  },
  {
    "command": "git.copyCommitMessage"
  },
  {
    "command": "git.createTag"
  },
  {
    "command": "git.deleteBranch"
  },
  {
    "command": "git.deleteRemoteTag"
  },
  {
    "command": "git.deleteTag"
  },
  {
    "command": "git.diff.stageHunk"
  },
  {
    "command": "git.diff.stageSelection"
  },
  {
    "command": "git.fetch"
  },
  {
    "command": "git.fetchAll"
  },
  {
    "command": "git.fetchPrune"
  },
  {
    "command": "git.fetchRef"
  },
  {
    "command": "git.ignore"
  },
  {
    "command": "git.init"
  },
  {
    "command": "git.manageUnsafeRepositories"
  },
  {
    "command": "git.merge"
  },
  {
    "command": "git.mergeAbort"
  },
  {
    "command": "git.openAllChanges"
  },
  {
    "command": "git.openChange"
  },
  {
    "command": "git.openFile"
  },
  {
    "command": "git.openFile2"
  },
  {
    "command": "git.openHEADFile"
  },
  {
    "command": "git.openMergeEditor"
  },
  {
    "command": "git.openRepositoriesInParentFolders"
  },
  {
    "command": "git.openRepository"
  },
  {
    "command": "git.openResource"
  },
  {
    "command": "git.publish"
  },
  {
    "command": "git.pull"
  },
  {
    "command": "git.pullFrom"
  },
  {
    "command": "git.pullRebase"
  },
  {
    "command": "git.pullRef"
  },
  {
    "command": "git.push"
  },
  {
    "command": "git.pushForce"
  },
  {
    "command": "git.pushRef"
  },
  {
    "command": "git.pushTags"
  },
  {
    "command": "git.pushTo"
  },
  {
    "command": "git.pushToForce"
  },
  {
    "command": "git.pushWithTags"
  },
  {
    "command": "git.pushWithTagsForce"
  },
  {
    "command": "git.rebase"
  },
  {
    "command": "git.rebaseAbort"
  },
  {
    "command": "git.refresh"
  },
  {
    "command": "git.removeRemote"
  },
  {
    "command": "git.rename"
  },
  {
    "command": "git.renameBranch"
  },
  {
    "command": "git.reopenClosedRepositories"
  },
  {
    "command": "git.restoreCommitTemplate"
  },
  {
    "command": "git.revealFileInOS.linux"
  },
  {
    "command": "git.revealFileInOS.mac"
  },
  {
    "command": "git.revealFileInOS.windows"
  },
  {
    "command": "git.revealInExplorer"
  },
  {
    "command": "git.revertChange"
  },
  {
    "command": "git.runGitMerge"
  },
  {
    "command": "git.runGitMergeDiff3"
  },
  {
    "command": "git.showOutput"
  },
  {
    "command": "git.stage"
  },
  {
    "command": "git.stageAll"
  },
  {
    "command": "git.stageAllMerge"
  },
  {
    "command": "git.stageAllTracked"
  },
  {
    "command": "git.stageAllUntracked"
  },
  {
    "command": "git.stageChange"
  },
  {
    "command": "git.stageFile"
  },
  {
    "command": "git.stash"
  },
  {
    "command": "git.stashApply"
  },
  {
    "command": "git.stashApplyEditor"
  },
  {
    "command": "git.stashApplyLatest"
  },
  {
    "command": "git.stashDrop"
  },
  {
    "command": "git.stashDropAll"
  },
  {
    "command": "git.stashDropEditor"
  },
  {
    "command": "git.stashIncludeUntracked"
  },
  {
    "command": "git.stashPop"
  },
  {
    "command": "git.stashPopEditor"
  },
  {
    "command": "git.stashPopLatest"
  },
  {
    "command": "git.stashStaged"
  },
  {
    "command": "git.stashView"
  },
  {
    "command": "git.sync"
  },
  {
    "command": "git.syncRebase"
  },
  {
    "command": "git.timeline.compareWithSelected"
  },
  {
    "command": "git.timeline.copyCommitId"
  },
  {
    "command": "git.timeline.copyCommitMessage"
  },
  {
    "command": "git.timeline.openDiff"
  },
  {
    "command": "git.timeline.selectForCompare"
  },
  {
    "command": "git.timeline.viewCommit"
  },
  {
    "command": "git.undoCommit"
  },
  {
    "command": "git.unstage"
  },
  {
    "command": "git.unstageAll"
  },
  {
    "command": "git.unstageFile"
  },
  {
    "command": "git.viewAllChanges"
  },
  {
    "command": "git.viewChanges"
  },
  {
    "command": "git.viewCommit"
  },
  {
    "command": "git.viewStagedChanges"
  },
  {
    "command": "git.viewUntrackedChanges"
  },
  {
    "command": "github.copilot.chat.attachFile"
  },
  {
    "command": "github.copilot.chat.attachSelection"
  },
  {
    "command": "github.copilot.chat.explain"
  },
  {
    "command": "github.copilot.chat.explain.palette"
  },
  {
    "command": "github.copilot.chat.selectKnowledgeBase"
  },
  {
    "command": "github.copilot.collectDiagnostics"
  },
  {
    "command": "github.copilot.createFile"
  },
  {
    "command": "github.copilot.createLaunchJsonFileWithContents"
  },
  {
    "command": "github.copilot.createProject"
  },
  {
    "command": "github.copilot.debug.collectDiagnostics"
  },
  {
    "command": "github.copilot.debug.generateConfiguration"
  },
  {
    "command": "github.copilot.debug.generateSTest"
  },
  {
    "command": "github.copilot.debug.workbenchState"
  },
  {
    "command": "github.copilot.devcontainer.generateDevContainerConfig"
  },
  {
    "command": "github.copilot.executeSearch"
  },
  {
    "command": "github.copilot.ghpr.applySuggestion"
  },
  {
    "command": "github.copilot.git.generateCommitMessage"
  },
  {
    "command": "github.copilot.interactiveEditor.fix"
  },
  {
    "command": "github.copilot.interactiveEditor.generate"
  },
  {
    "command": "github.copilot.interactiveEditor.generateDocs"
  },
  {
    "command": "github.copilot.interactiveEditor.generateTests"
  },
  {
    "command": "github.copilot.interactiveEditor.review"
  },
  {
    "command": "github.copilot.interactiveEditor.review.apply"
  },
  {
    "command": "github.copilot.interactiveEditor.review.applyAndNext"
  },
  {
    "command": "github.copilot.interactiveEditor.review.applyShort"
  },
  {
    "command": "github.copilot.interactiveEditor.review.changes"
  },
  {
    "command": "github.copilot.interactiveEditor.review.continueInChat"
  },
  {
    "command": "github.copilot.interactiveEditor.review.continueInInlineChat"
  },
  {
    "command": "github.copilot.interactiveEditor.review.current"
  },
  {
    "command": "github.copilot.interactiveEditor.review.discard"
  },
  {
    "command": "github.copilot.interactiveEditor.review.discardAll"
  },
  {
    "command": "github.copilot.interactiveEditor.review.discardAndNext"
  },
  {
    "command": "github.copilot.interactiveEditor.review.discardShort"
  },
  {
    "command": "github.copilot.interactiveEditor.review.markHelpful"
  },
  {
    "command": "github.copilot.interactiveEditor.review.markUnhelpful"
  },
  {
    "command": "github.copilot.interactiveEditor.review.next"
  },
  {
    "command": "github.copilot.interactiveEditor.review.previous"
  },
  {
    "command": "github.copilot.interactiveEditor.review.stagedChanges"
  },
  {
    "command": "github.copilot.interactiveSession.feedback"
  },
  {
    "command": "github.copilot.offline"
  },
  {
    "command": "github.copilot.open.walkthrough"
  },
  {
    "command": "github.copilot.openDocs"
  },
  {
    "command": "github.copilot.openFile"
  },
  {
    "command": "github.copilot.openLogs"
  },
  {
    "command": "github.copilot.sendFeedback"
  },
  {
    "command": "github.copilot.signIn"
  },
  {
    "command": "github.copilot.startDebugging"
  },
  {
    "command": "github.copilot.terminal.explainTerminalLastCommand"
  },
  {
    "command": "github.copilot.terminal.explainTerminalSelection"
  },
  {
    "command": "github.copilot.terminal.explainTerminalSelectionContextMenu"
  },
  {
    "command": "github.copilot.terminal.fixTerminalLastCommand"
  },
  {
    "command": "github.copilot.terminal.generateCommitMessage"
  },
  {
    "command": "github.copilot.tests.applyMutations"
  },
  {
    "command": "github.copilot.tests.fixTestFailure"
  },
  {
    "command": "github.copilot.tests.fixTestFailure.applyAndRerun"
  },
  {
    "command": "github.copilot.toggleCopilot"
  },
  {
    "command": "github.copilot.toggleStatusMenu"
  },
  {
    "command": "github.copilotChat.signIn"
  },
  {
    "command": "github.copilotChat.signInChoose"
  },
  {
    "command": "github.copilotChat.signInGHE"
  },
  {
    "command": "github.copyVscodeDevLink"
  },
  {
    "command": "github.copyVscodeDevLinkFile"
  },
  {
    "command": "github.copyVscodeDevLinkWithoutRange"
  },
  {
    "command": "github.openOnVscodeDev"
  },
  {
    "command": "github.publish"
  },
  {
    "command": "goToNextReferenceFromEmbeddedEditor"
  },
  {
    "command": "goToPreviousReferenceFromEmbeddedEditor"
  },
  {
    "command": "hideCustomTitleBar"
  },
  {
    "command": "hideCustomTitleBarInFullScreen"
  },
  {
    "command": "imagePreview.copyImage"
  },
  {
    "command": "imagePreview.zoomIn"
  },
  {
    "command": "imagePreview.zoomOut"
  },
  {
    "command": "inlayHints.startReadingLineWithHint"
  },
  {
    "command": "inlineChat.configure"
  },
  {
    "command": "inlineChat.toggleDiff"
  },
  {
    "command": "interactive.input.clear"
  },
  {
    "command": "interactiveEditor.start"
  },
  {
    "command": "io.orta.jest.disable-auto-focus"
  },
  {
    "command": "io.orta.jest.editor.workspace.run-all-tests"
  },
  {
    "command": "io.orta.jest.editor.workspace.toggle-coverage"
  },
  {
    "command": "io.orta.jest.run-all-tests"
  },
  {
    "command": "io.orta.jest.save-output-config"
  },
  {
    "command": "io.orta.jest.setup-extension"
  },
  {
    "command": "io.orta.jest.start"
  },
  {
    "command": "io.orta.jest.stop"
  },
  {
    "command": "io.orta.jest.test-item.reveal-output"
  },
  {
    "command": "io.orta.jest.test-item.run-mode.change"
  },
  {
    "command": "io.orta.jest.test-item.update-snapshot"
  },
  {
    "command": "io.orta.jest.test-item.view-snapshot"
  },
  {
    "command": "io.orta.jest.toggle-coverage"
  },
  {
    "command": "io.orta.jest.workspace.run-all-tests"
  },
  {
    "command": "io.orta.jest.workspace.save-run-mode"
  },
  {
    "command": "io.orta.jest.workspace.start"
  },
  {
    "command": "io.orta.jest.workspace.stop"
  },
  {
    "command": "io.orta.jest.workspace.toggle-coverage"
  },
  {
    "command": "ipynb.cleanInvalidImageAttachment"
  },
  {
    "command": "ipynb.newUntitledIpynb"
  },
  {
    "command": "ipynb.openIpynbInNotebookEditor"
  },
  {
    "command": "javascript.goToProjectConfig"
  },
  {
    "command": "javascript.reloadProjects"
  },
  {
    "command": "javascript.removeUnusedImports"
  },
  {
    "command": "javascript.sortImports"
  },
  {
    "command": "js.projectStatus.command"
  },
  {
    "command": "jsBrowserBreakpoints.focus"
  },
  {
    "command": "jsBrowserBreakpoints.resetViewLocation"
  },
  {
    "command": "jsDebugNetworkTree.focus"
  },
  {
    "command": "jsDebugNetworkTree.resetViewLocation"
  },
  {
    "command": "jsExcludedCallers.focus"
  },
  {
    "command": "jsExcludedCallers.resetViewLocation"
  },
  {
    "command": "json.clearCache"
  },
  {
    "command": "json.sort"
  },
  {
    "command": "keybindings.editor.clearSearchHistory"
  },
  {
    "command": "keybindings.editor.copyCommandKeybindingEntry"
  },
  {
    "command": "keybindings.editor.copyCommandTitle"
  },
  {
    "command": "keybindings.editor.resetKeybinding"
  },
  {
    "command": "keybindings.editor.showConflicts"
  },
  {
    "command": "keybindings.editor.showDefaultKeybindings"
  },
  {
    "command": "keybindings.editor.showExtensionKeybindings"
  },
  {
    "command": "keybindings.editor.showUserKeybindings"
  },
  {
    "command": "keywordActivation.status.command"
  },
  {
    "command": "lastCursorLineSelect"
  },
  {
    "command": "lastCursorLineSelectDrag"
  },
  {
    "command": "lastCursorWordSelect"
  },
  {
    "command": "layoutEditorGroups"
  },
  {
    "command": "lineBreakInsert"
  },
  {
    "command": "list.collapseAllToFocus"
  },
  {
    "command": "list.focusParent"
  },
  {
    "command": "list.resizeColumn"
  },
  {
    "command": "list.scrollLeft"
  },
  {
    "command": "list.scrollRight"
  },
  {
    "command": "list.selectAndPreserveFocus"
  },
  {
    "command": "list.toggleFilterOnType"
  },
  {
    "command": "list.toggleFindMatchType"
  },
  {
    "command": "list.toggleFindMode"
  },
  {
    "command": "list.toggleKeyboardNavigation"
  },
  {
    "command": "list.triggerTypeNavigation"
  },
  {
    "command": "loadedScripts.collapse"
  },
  {
    "command": "markdown.editor.insertImageFromWorkspace"
  },
  {
    "command": "markdown.editor.insertLinkFromWorkspace"
  },
  {
    "command": "markdown.findAllFileReferences"
  },
  {
    "command": "markdown.preview.refresh"
  },
  {
    "command": "markdown.preview.toggleLock"
  },
  {
    "command": "markdown.showLockedPreviewToSide"
  },
  {
    "command": "markdown.showPreviewSecuritySelector"
  },
  {
    "command": "markdown.showSource"
  },
  {
    "command": "menu.resetHiddenStates"
  },
  {
    "command": "merge-conflict.accept.all-both"
  },
  {
    "command": "merge-conflict.accept.all-current"
  },
  {
    "command": "merge-conflict.accept.all-incoming"
  },
  {
    "command": "merge-conflict.accept.both"
  },
  {
    "command": "merge-conflict.accept.current"
  },
  {
    "command": "merge-conflict.accept.incoming"
  },
  {
    "command": "merge-conflict.accept.selection"
  },
  {
    "command": "merge-conflict.compare"
  },
  {
    "command": "merge-conflict.next"
  },
  {
    "command": "merge-conflict.previous"
  },
  {
    "command": "merge.acceptAllInput1"
  },
  {
    "command": "merge.acceptAllInput2"
  },
  {
    "command": "merge.columnLayout"
  },
  {
    "command": "merge.dev.copyContentsJson"
  },
  {
    "command": "merge.dev.loadContentsFromFolder"
  },
  {
    "command": "merge.dev.openContentsJson"
  },
  {
    "command": "merge.dev.openSelectionInTemporaryMergeEditor"
  },
  {
    "command": "merge.dev.saveContentsToFolder"
  },
  {
    "command": "merge.goToNextUnhandledConflict"
  },
  {
    "command": "merge.goToPreviousUnhandledConflict"
  },
  {
    "command": "merge.mixedLayout"
  },
  {
    "command": "merge.openBaseEditor"
  },
  {
    "command": "merge.openResult"
  },
  {
    "command": "merge.showBase"
  },
  {
    "command": "merge.showBaseCenter"
  },
  {
    "command": "merge.showBaseTop"
  },
  {
    "command": "merge.showNonConflictingChanges"
  },
  {
    "command": "merge.toggleActiveConflictInput1"
  },
  {
    "command": "merge.toggleActiveConflictInput2"
  },
  {
    "command": "mergeEditor.acceptMerge"
  },
  {
    "command": "mergeEditor.compareInput1WithBase"
  },
  {
    "command": "mergeEditor.compareInput2WithBase"
  },
  {
    "command": "mergeEditor.resetCloseWithConflictsChoice"
  },
  {
    "command": "mergeEditor.resetResultToBaseAndAutoMerge"
  },
  {
    "command": "multiDiffEditor.collapseAll"
  },
  {
    "command": "multiDiffEditor.expandAll"
  },
  {
    "command": "multiDiffEditor.goToFile"
  },
  {
    "command": "noop"
  },
  {
    "command": "notebook.action.changeTabDisplaySize"
  },
  {
    "command": "notebook.action.convertIndentationToSpaces"
  },
  {
    "command": "notebook.action.convertIndentationToTabs"
  },
  {
    "command": "notebook.action.indentUsingSpaces"
  },
  {
    "command": "notebook.action.indentUsingTabs"
  },
  {
    "command": "notebook.action.toggleNotebookStickyScroll"
  },
  {
    "command": "notebook.cancelExecution"
  },
  {
    "command": "notebook.cell.cancelExecution"
  },
  {
    "command": "notebook.cell.changeLanguage"
  },
  {
    "command": "notebook.cell.chat.close"
  },
  {
    "command": "notebook.cell.chat.restore"
  },
  {
    "command": "notebook.cell.chat.startAtTop"
  },
  {
    "command": "notebook.cell.chat.stop"
  },
  {
    "command": "notebook.cell.collapseAllCellInputs"
  },
  {
    "command": "notebook.cell.collapseAllCellOutputs"
  },
  {
    "command": "notebook.cell.executeCellAndBelow"
  },
  {
    "command": "notebook.cell.executeCellsAbove"
  },
  {
    "command": "notebook.cell.expandAllCellInputs"
  },
  {
    "command": "notebook.cell.expandAllCellOutputs"
  },
  {
    "command": "notebook.cell.insertCodeCellAtTop"
  },
  {
    "command": "notebook.cell.insertMarkdownCellAbove"
  },
  {
    "command": "notebook.cell.insertMarkdownCellAtTop"
  },
  {
    "command": "notebook.cell.insertMarkdownCellBelow"
  },
  {
    "command": "notebook.cell.joinSelected"
  },
  {
    "command": "notebook.cellOuput.showEmptyOutputs"
  },
  {
    "command": "notebook.cellOutput.copy"
  },
  {
    "command": "notebook.cellOutput.openInTextEditor"
  },
  {
    "command": "notebook.chat.selectAndInsertKernelVariable"
  },
  {
    "command": "notebook.clearAllCellsOutputs"
  },
  {
    "command": "notebook.clearNotebookEdtitorTypeCache"
  },
  {
    "command": "notebook.clearNotebookKernelsMRUCache"
  },
  {
    "command": "notebook.diff.cell.revertInput"
  },
  {
    "command": "notebook.diff.cell.revertMetadata"
  },
  {
    "command": "notebook.diff.cell.revertOutputs"
  },
  {
    "command": "notebook.diff.cell.switchOutputRenderingStyleToText"
  },
  {
    "command": "notebook.diff.cell.toggleCollapseUnchangedRegions"
  },
  {
    "command": "notebook.diff.openFile"
  },
  {
    "command": "notebook.diff.revertMetadata"
  },
  {
    "command": "notebook.diff.showMetadata"
  },
  {
    "command": "notebook.diff.showOutputs"
  },
  {
    "command": "notebook.diff.switchToText"
  },
  {
    "command": "notebook.diffEditor.2.cell.revertInput"
  },
  {
    "command": "notebook.diffEditor.2.cell.revertMetadata"
  },
  {
    "command": "notebook.diffEditor.2.cell.revertOutputs"
  },
  {
    "command": "notebook.diffEditor.2.goToCell"
  },
  {
    "command": "notebook.diffEditor.hideUnchangedCells"
  },
  {
    "command": "notebook.diffEditor.showUnchangedCells"
  },
  {
    "command": "notebook.execute"
  },
  {
    "command": "notebook.inlineChat.acceptChangesAndRun"
  },
  {
    "command": "notebook.inspectLayout"
  },
  {
    "command": "notebook.interruptExecution"
  },
  {
    "command": "notebook.outline.toggleCodeCellSymbols"
  },
  {
    "command": "notebook.outline.toggleCodeCells"
  },
  {
    "command": "notebook.outline.toggleShowMarkdownHeadersOnly"
  },
  {
    "command": "notebook.renderAllMarkdownCells"
  },
  {
    "command": "notebook.revealLastFailedCell"
  },
  {
    "command": "notebook.revealRunningCell"
  },
  {
    "command": "notebook.saveMimeTypeOrder"
  },
  {
    "command": "notebook.section.expandSection"
  },
  {
    "command": "notebook.section.foldSection"
  },
  {
    "command": "notebook.section.runCells"
  },
  {
    "command": "notebook.section.runSingleCell"
  },
  {
    "command": "notebook.selectIndentation"
  },
  {
    "command": "notebook.setProfile"
  },
  {
    "command": "notebook.toggle.diff.cell.ignoreTrimWhitespace"
  },
  {
    "command": "notebook.toggleCellToolbarPosition"
  },
  {
    "command": "notebook.toggleCellToolbarPositionFromEditorTitle"
  },
  {
    "command": "notebook.toggleLayoutTroubleshoot"
  },
  {
    "command": "notebook.toggleLineNumbersFromEditorTitle"
  },
  {
    "command": "notifications.clearAll"
  },
  {
    "command": "notifications.focusToasts"
  },
  {
    "command": "notifications.toggleDoNotDisturbMode"
  },
  {
    "command": "notifications.toggleDoNotDisturbModeBySource"
  },
  {
    "command": "notifications.toggleList"
  },
  {
    "command": "npm-intellisense.import"
  },
  {
    "command": "npm.debugScript"
  },
  {
    "command": "npm.focus"
  },
  {
    "command": "npm.openScript"
  },
  {
    "command": "npm.packageManager"
  },
  {
    "command": "npm.refresh"
  },
  {
    "command": "npm.resetViewLocation"
  },
  {
    "command": "npm.runInstall"
  },
  {
    "command": "npm.runScript"
  },
  {
    "command": "npm.runScriptFromFolder"
  },
  {
    "command": "npm.runSelectedScript"
  },
  {
    "command": "openEditors.closeAll"
  },
  {
    "command": "openEditors.newUntitledFile"
  },
  {
    "command": "openInIntegratedTerminal"
  },
  {
    "command": "openInTerminal"
  },
  {
    "command": "openReference"
  },
  {
    "command": "opensshremotes.addNewSshHost"
  },
  {
    "command": "opensshremotes.cleanCurrentRemoteServer"
  },
  {
    "command": "opensshremotes.cleanDevBox"
  },
  {
    "command": "opensshremotes.cleanLocalServer"
  },
  {
    "command": "opensshremotes.cleanRemoteServer"
  },
  {
    "command": "opensshremotes.getHelp"
  },
  {
    "command": "opensshremotes.getStarted"
  },
  {
    "command": "opensshremotes.openConfigFile"
  },
  {
    "command": "opensshremotes.openEmptyWindow"
  },
  {
    "command": "opensshremotes.openEmptyWindowInCurrentWindow"
  },
  {
    "command": "opensshremotes.openEmptyWindowOnCurrentHost"
  },
  {
    "command": "opensshremotes.openWebUI"
  },
  {
    "command": "opensshremotes.provideFeedback"
  },
  {
    "command": "opensshremotes.reportIssue"
  },
  {
    "command": "opensshremotes.settings"
  },
  {
    "command": "opensshremotes.showLog"
  },
  {
    "command": "outline.collapse"
  },
  {
    "command": "outline.expand"
  },
  {
    "command": "outline.filterOnType"
  },
  {
    "command": "outline.focus"
  },
  {
    "command": "outline.followCursor"
  },
  {
    "command": "outline.removeView"
  },
  {
    "command": "outline.resetViewLocation"
  },
  {
    "command": "outline.sortByKind"
  },
  {
    "command": "outline.sortByName"
  },
  {
    "command": "outline.sortByPosition"
  },
  {
    "command": "outline.toggleVisibility"
  },
  {
    "command": "paste"
  },
  {
    "command": "perf.event.profiling"
  },
  {
    "command": "perf.insta.printAsyncCycles"
  },
  {
    "command": "perf.insta.printTraces"
  },
  {
    "command": "perfview.show"
  },
  {
    "command": "prettier.createConfigFile"
  },
  {
    "command": "prettier.forceFormatDocument"
  },
  {
    "command": "prettier.openOutput"
  },
  {
    "command": "problems.action.copyMessage"
  },
  {
    "command": "problems.action.copyRelatedInformationMessage"
  },
  {
    "command": "problems.action.showMultilineMessage"
  },
  {
    "command": "problems.action.showSinglelineMessage"
  },
  {
    "command": "pylance.dumpCachedTypes"
  },
  {
    "command": "pylance.dumpCodeFlowGraph"
  },
  {
    "command": "pylance.dumpNodes"
  },
  {
    "command": "pylance.dumpTokens"
  },
  {
    "command": "pylance.dumpTypes"
  },
  {
    "command": "pylance.gotoOutputChannel"
  },
  {
    "command": "pylance.indexing.clearPersistedIndices"
  },
  {
    "command": "pylance.learnMoreAboutImportResolution"
  },
  {
    "command": "pylance.logging.start"
  },
  {
    "command": "pylance.logging.stop"
  },
  {
    "command": "pylance.profiling.start"
  },
  {
    "command": "pylance.profiling.stop"
  },
  {
    "command": "pylance.reportIssue"
  },
  {
    "command": "python.analysis.restartLanguageServer"
  },
  {
    "command": "python.clearCacheAndReload"
  },
  {
    "command": "python.clearWorkspaceInterpreter"
  },
  {
    "command": "python.configureTests"
  },
  {
    "command": "python.createEnvironment"
  },
  {
    "command": "python.createEnvironment-button"
  },
  {
    "command": "python.createNewFile"
  },
  {
    "command": "python.createTerminal"
  },
  {
    "command": "python.enableSourceMapSupport"
  },
  {
    "command": "python.execInDedicatedTerminal"
  },
  {
    "command": "python.execInTerminal"
  },
  {
    "command": "python.execInTerminal-icon"
  },
  {
    "command": "python.execSelectionInDjangoShell"
  },
  {
    "command": "python.installJupyter"
  },
  {
    "command": "python.launchTensorBoard"
  },
  {
    "command": "python.reportIssue"
  },
  {
    "command": "python.setInterpreter"
  },
  {
    "command": "python.startNativeREPL"
  },
  {
    "command": "python.startREPL"
  },
  {
    "command": "python.viewLanguageServerOutput"
  },
  {
    "command": "python.viewOutput"
  },
  {
    "command": "refactorPreview"
  },
  {
    "command": "refactorPreview.discard"
  },
  {
    "command": "refactorPreview.focus"
  },
  {
    "command": "refactorPreview.groupByFile"
  },
  {
    "command": "refactorPreview.groupByType"
  },
  {
    "command": "refactorPreview.resetViewContainerLocation"
  },
  {
    "command": "refactorPreview.resetViewLocation"
  },
  {
    "command": "refactorPreview.toggleGrouping"
  },
  {
    "command": "references-view.clear"
  },
  {
    "command": "references-view.clearHistory"
  },
  {
    "command": "references-view.copy"
  },
  {
    "command": "references-view.copyAll"
  },
  {
    "command": "references-view.copyPath"
  },
  {
    "command": "references-view.findImplementations"
  },
  {
    "command": "references-view.pickFromHistory"
  },
  {
    "command": "references-view.refind"
  },
  {
    "command": "references-view.refresh"
  },
  {
    "command": "references-view.removeCallItem"
  },
  {
    "command": "references-view.removeReferenceItem"
  },
  {
    "command": "references-view.removeTypeItem"
  },
  {
    "command": "references-view.showIncomingCalls"
  },
  {
    "command": "references-view.showOutgoingCalls"
  },
  {
    "command": "references-view.showSubtypes"
  },
  {
    "command": "references-view.showSupertypes"
  },
  {
    "command": "references-view.showTypeHierarchy"
  },
  {
    "command": "references-view.tree.focus"
  },
  {
    "command": "references-view.tree.resetViewLocation"
  },
  {
    "command": "remote-containers.addExtensionToConfig"
  },
  {
    "command": "remote-containers.attachToContainerInCurrentWindow"
  },
  {
    "command": "remote-containers.attachToContainerInNewWindow"
  },
  {
    "command": "remote-containers.attachToK8sContainer"
  },
  {
    "command": "remote-containers.attachToK8sContainerFromViewlet"
  },
  {
    "command": "remote-containers.attachToRunningContainer"
  },
  {
    "command": "remote-containers.attachToRunningContainerFromViewlet"
  },
  {
    "command": "remote-containers.checkoutPRInVolume"
  },
  {
    "command": "remote-containers.cleanUpDevContainers"
  },
  {
    "command": "remote-containers.cloneInVolume"
  },
  {
    "command": "remote-containers.cloneInVolumeFromViewlet"
  },
  {
    "command": "remote-containers.cloneRepositoryInVolumeFromViewlet"
  },
  {
    "command": "remote-containers.configureContainerFeatures"
  },
  {
    "command": "remote-containers.createDevContainer"
  },
  {
    "command": "remote-containers.createDevContainerFile"
  },
  {
    "command": "remote-containers.createDevContainerFileWithCopilot"
  },
  {
    "command": "remote-containers.editDevContainerJSON"
  },
  {
    "command": "remote-containers.explorerDetailsRefresh"
  },
  {
    "command": "remote-containers.explorerTargetsRefresh"
  },
  {
    "command": "remote-containers.explorerVolumesRefresh"
  },
  {
    "command": "remote-containers.getHelp"
  },
  {
    "command": "remote-containers.getStarted"
  },
  {
    "command": "remote-containers.inspectDockerResource"
  },
  {
    "command": "remote-containers.inspectInBasicDevContainer"
  },
  {
    "command": "remote-containers.inspectVolume"
  },
  {
    "command": "remote-containers.inspectVolumeFromViewlet"
  },
  {
    "command": "remote-containers.installDocker"
  },
  {
    "command": "remote-containers.installDockerInWSL"
  },
  {
    "command": "remote-containers.installUserCLI"
  },
  {
    "command": "remote-containers.labelPortAndUpdateConfig"
  },
  {
    "command": "remote-containers.newContainer"
  },
  {
    "command": "remote-containers.openAttachConfigByNameFile"
  },
  {
    "command": "remote-containers.openAttachDevContainerFile"
  },
  {
    "command": "remote-containers.openDevContainerFile"
  },
  {
    "command": "remote-containers.openFolder"
  },
  {
    "command": "remote-containers.openFolderInContainerInCurrentWindow"
  },
  {
    "command": "remote-containers.openFolderInContainerInNewWindow"
  },
  {
    "command": "remote-containers.openInformationAboutMountPerformance"
  },
  {
    "command": "remote-containers.openLastLogFile"
  },
  {
    "command": "remote-containers.openLogFile"
  },
  {
    "command": "remote-containers.openPullRequestInVolume"
  },
  {
    "command": "remote-containers.openRepositoryFromGitWithEditSession"
  },
  {
    "command": "remote-containers.openRepositoryFromRemoteHubWithEditSession"
  },
  {
    "command": "remote-containers.openRepositoryInUniqueVolume"
  },
  {
    "command": "remote-containers.openRepositoryInVolume"
  },
  {
    "command": "remote-containers.openWorkspace"
  },
  {
    "command": "remote-containers.provideFeedback"
  },
  {
    "command": "remote-containers.pruneVolumes"
  },
  {
    "command": "remote-containers.rebuildAndReopenInContainer"
  },
  {
    "command": "remote-containers.rebuildContainer"
  },
  {
    "command": "remote-containers.rebuildContainerNoCache"
  },
  {
    "command": "remote-containers.rebuildNoCacheAndReopenInContainer"
  },
  {
    "command": "remote-containers.removeContainer"
  },
  {
    "command": "remote-containers.removeRecentFolder"
  },
  {
    "command": "remote-containers.removeVolume"
  },
  {
    "command": "remote-containers.reopenInContainer"
  },
  {
    "command": "remote-containers.reopenInSSH"
  },
  {
    "command": "remote-containers.reopenInTunnel"
  },
  {
    "command": "remote-containers.reopenInWSL"
  },
  {
    "command": "remote-containers.reopenLocally"
  },
  {
    "command": "remote-containers.reportIssue"
  },
  {
    "command": "remote-containers.revealLogTerminal"
  },
  {
    "command": "remote-containers.revealPostCreateTerminal"
  },
  {
    "command": "remote-containers.settings"
  },
  {
    "command": "remote-containers.showContainerLog"
  },
  {
    "command": "remote-containers.showDetails"
  },
  {
    "command": "remote-containers.showRecoveryContainerNotificationReset"
  },
  {
    "command": "remote-containers.showReopenInContainerNotificationReset"
  },
  {
    "command": "remote-containers.startContainer"
  },
  {
    "command": "remote-containers.stopContainer"
  },
  {
    "command": "remote-containers.switchContainer"
  },
  {
    "command": "remote-containers.testConnection"
  },
  {
    "command": "remote-containers.trySample"
  },
  {
    "command": "remote-explorer.add"
  },
  {
    "command": "remote-explorer.configureSsh"
  },
  {
    "command": "remote-explorer.connectToFolderInCurrentWindow"
  },
  {
    "command": "remote-explorer.connectToFolderInNewWindow"
  },
  {
    "command": "remote-explorer.connectToRemoteInCurrentWindow"
  },
  {
    "command": "remote-explorer.connectToRemoteInNewWindow"
  },
  {
    "command": "remote-explorer.connectToWslUsingDistro"
  },
  {
    "command": "remote-explorer.connectToWslUsingDistroInNewWindow"
  },
  {
    "command": "remote-explorer.deleteFolderHistoryItem"
  },
  {
    "command": "remote-explorer.refresh"
  },
  {
    "command": "remote-explorer.signIntoTunnelGithub"
  },
  {
    "command": "remote-explorer.signIntoTunnelMicrosoft"
  },
  {
    "command": "remote-explorer.unregisterTunnel"
  },
  {
    "command": "remote-tunnels.connectCurrentWindowToTunnel"
  },
  {
    "command": "remote-tunnels.getStarted"
  },
  {
    "command": "remote-tunnels.openOnDesktop"
  },
  {
    "command": "remote-tunnels.reportIssue"
  },
  {
    "command": "remote-tunnels.settings"
  },
  {
    "command": "remote-tunnels.showUsageLimits"
  },
  {
    "command": "remote-tunnels.signIntoTunnelWithDifferentAccount"
  },
  {
    "command": "remote-wsl.connect"
  },
  {
    "command": "remote-wsl.connectInNewWindow"
  },
  {
    "command": "remote-wsl.connectUsingDistro"
  },
  {
    "command": "remote-wsl.connectUsingDistroInNewWindow"
  },
  {
    "command": "remote-wsl.explorer.addDistro"
  },
  {
    "command": "remote-wsl.explorer.connectInCurrentWindow"
  },
  {
    "command": "remote-wsl.explorer.connectInNewWindow"
  },
  {
    "command": "remote-wsl.explorer.deleteDistro"
  },
  {
    "command": "remote-wsl.explorer.openDistroInCurrentWindow"
  },
  {
    "command": "remote-wsl.explorer.openDistroInNewWindow"
  },
  {
    "command": "remote-wsl.explorer.refresh"
  },
  {
    "command": "remote-wsl.explorer.removeFolder"
  },
  {
    "command": "remote-wsl.explorer.setDefaultDistro"
  },
  {
    "command": "remote-wsl.getHelp"
  },
  {
    "command": "remote-wsl.getStarted"
  },
  {
    "command": "remote-wsl.newWindow"
  },
  {
    "command": "remote-wsl.newWindowForDistro"
  },
  {
    "command": "remote-wsl.openFolder"
  },
  {
    "command": "remote-wsl.provideFeedback"
  },
  {
    "command": "remote-wsl.reopenFromRecommendation"
  },
  {
    "command": "remote-wsl.reopenInWSL"
  },
  {
    "command": "remote-wsl.reopenInWindows"
  },
  {
    "command": "remote-wsl.reportIssue"
  },
  {
    "command": "remote-wsl.showLog"
  },
  {
    "command": "remote.tunnel.changeLocalPort"
  },
  {
    "command": "remote.tunnel.closeCommandPalette"
  },
  {
    "command": "remote.tunnel.copyAddressCommandPalette"
  },
  {
    "command": "remote.tunnel.forwardCommandPalette"
  },
  {
    "command": "remote.tunnel.forwardInline"
  },
  {
    "command": "remote.tunnel.open"
  },
  {
    "command": "remote.tunnel.openCommandPalette"
  },
  {
    "command": "remote.tunnel.openPreview"
  },
  {
    "command": "remote.tunnel.setProtocolHttp"
  },
  {
    "command": "remote.tunnel.setProtocolHttps"
  },
  {
    "command": "remoteTargets.focus"
  },
  {
    "command": "remoteTargets.resetViewLocation"
  },
  {
    "command": "removeRootFolder"
  },
  {
    "command": "repl.action.copyAll"
  },
  {
    "command": "replacePreviousChar"
  },
  {
    "command": "resetGettingStartedProgress"
  },
  {
    "command": "revealInExplorer"
  },
  {
    "command": "scm.openInIntegratedTerminal"
  },
  {
    "command": "scm.openInTerminal"
  },
  {
    "command": "scrollEditorBottom"
  },
  {
    "command": "scrollEditorTop"
  },
  {
    "command": "scrollLeft"
  },
  {
    "command": "scrollRight"
  },
  {
    "command": "search.action.clearHistory"
  },
  {
    "command": "search.action.clearSearchResults"
  },
  {
    "command": "search.action.collapseSearchResults"
  },
  {
    "command": "search.action.copyAll"
  },
  {
    "command": "search.action.excludeFromSearch"
  },
  {
    "command": "search.action.expandRecursively"
  },
  {
    "command": "search.action.expandSearchResults"
  },
  {
    "command": "search.action.focusFilesToExclude"
  },
  {
    "command": "search.action.focusFilesToInclude"
  },
  {
    "command": "search.action.focusSearchList"
  },
  {
    "command": "search.action.openEditor"
  },
  {
    "command": "search.action.openNewEditor"
  },
  {
    "command": "search.action.openNewEditorFromView"
  },
  {
    "command": "search.action.openNewEditorToSide"
  },
  {
    "command": "search.action.refreshSearchResults"
  },
  {
    "command": "search.action.revealInSideBar"
  },
  {
    "command": "search.action.viewAsList"
  },
  {
    "command": "search.action.viewAsTree"
  },
  {
    "command": "selectFirstSuggestion"
  },
  {
    "command": "selectForCompare"
  },
  {
    "command": "selectLastSuggestion"
  },
  {
    "command": "setRootFolder"
  },
  {
    "command": "setSelection"
  },
  {
    "command": "settings.filterByOnline"
  },
  {
    "command": "settings.filterByTelemetry"
  },
  {
    "command": "settings.filterUntrusted"
  },
  {
    "command": "settings.switchToJSON"
  },
  {
    "command": "showCustomTitleBar"
  },
  {
    "command": "showEditorScreenReaderNotification"
  },
  {
    "command": "signals.sounds.help"
  },
  {
    "command": "simpleBrowser.show"
  },
  {
    "command": "targetsContainers.focus"
  },
  {
    "command": "targetsContainers.resetViewLocation"
  },
  {
    "command": "targetsWsl.focus"
  },
  {
    "command": "targetsWsl.resetViewLocation"
  },
  {
    "command": "terminal.focus"
  },
  {
    "command": "terminal.removeView"
  },
  {
    "command": "terminal.resetViewContainerLocation"
  },
  {
    "command": "terminal.resetViewLocation"
  },
  {
    "command": "terminal.toggleVisibility"
  },
  {
    "command": "testing.callStack.debug"
  },
  {
    "command": "testing.callStack.run"
  },
  {
    "command": "testing.cancelTestRefresh"
  },
  {
    "command": "testing.clearTestResults"
  },
  {
    "command": "testing.collapseAll"
  },
  {
    "command": "testing.collapsePeekStack"
  },
  {
    "command": "testing.configureProfile"
  },
  {
    "command": "testing.continuousRunUsingForTest"
  },
  {
    "command": "testing.coverage"
  },
  {
    "command": "testing.coverage.close"
  },
  {
    "command": "testing.coverage.uri"
  },
  {
    "command": "testing.coverageFilterToTest"
  },
  {
    "command": "testing.coverageFilterToTestInEditor"
  },
  {
    "command": "testing.coverageSelected"
  },
  {
    "command": "testing.coverageToggleToolbar"
  },
  {
    "command": "testing.coverageViewChangeSorting"
  },
  {
    "command": "testing.debug"
  },
  {
    "command": "testing.debug.uri"
  },
  {
    "command": "testing.debugSelected"
  },
  {
    "command": "testing.getSelectedProfiles"
  },
  {
    "command": "testing.goToRelatedCode"
  },
  {
    "command": "testing.goToRelatedTest"
  },
  {
    "command": "testing.hideTest"
  },
  {
    "command": "testing.openCoverage"
  },
  {
    "command": "testing.openMessageInEditor"
  },
  {
    "command": "testing.peekRelatedCode"
  },
  {
    "command": "testing.peekRelatedTest"
  },
  {
    "command": "testing.run"
  },
  {
    "command": "testing.run.uri"
  },
  {
    "command": "testing.runSelected"
  },
  {
    "command": "testing.runUsing"
  },
  {
    "command": "testing.searchForTestExtension"
  },
  {
    "command": "testing.selectDefaultTestProfiles"
  },
  {
    "command": "testing.sortByDuration"
  },
  {
    "command": "testing.sortByLocation"
  },
  {
    "command": "testing.sortByStatus"
  },
  {
    "command": "testing.startContinuousRun"
  },
  {
    "command": "testing.stopContinuousRun"
  },
  {
    "command": "testing.toggleContinuousRunForTest"
  },
  {
    "command": "testing.unhideAllTests"
  },
  {
    "command": "testing.unhideTest"
  },
  {
    "command": "testing.viewAsList"
  },
  {
    "command": "testing.viewAsTree"
  },
  {
    "command": "timeline.focus"
  },
  {
    "command": "timeline.removeView"
  },
  {
    "command": "timeline.resetViewLocation"
  },
  {
    "command": "timeline.toggleVisibility"
  },
  {
    "command": "toggle.diff.ignoreTrimWhitespace"
  },
  {
    "command": "toggle.diff.renderSideBySide"
  },
  {
    "command": "toggle.toggleCustomTitleBar"
  },
  {
    "command": "toggle.window.commandCenter"
  },
  {
    "command": "toggle.window.customTitleBarVisibility"
  },
  {
    "command": "toggle.window.customTitleBarVisibility.windowed"
  },
  {
    "command": "toggle.workbench.editor.editorActionsLocation"
  },
  {
    "command": "toggle.workbench.layoutControl.enabled"
  },
  {
    "command": "tree.toggleStickyScroll"
  },
  {
    "command": "tunnel-forwarding.restart"
  },
  {
    "command": "tunnel-forwarding.showLog"
  },
  {
    "command": "typescript.findAllFileReferences"
  },
  {
    "command": "typescript.goToProjectConfig"
  },
  {
    "command": "typescript.goToSourceDefinition"
  },
  {
    "command": "typescript.openTsServerLog"
  },
  {
    "command": "typescript.reloadProjects"
  },
  {
    "command": "typescript.removeUnusedImports"
  },
  {
    "command": "typescript.restartTsServer"
  },
  {
    "command": "typescript.selectTypeScriptVersion"
  },
  {
    "command": "typescript.sortImports"
  },
  {
    "command": "typescript.tsserverRequest"
  },
  {
    "command": "update.check"
  },
  {
    "command": "update.checkForUpdate"
  },
  {
    "command": "update.checking"
  },
  {
    "command": "update.downloadNow"
  },
  {
    "command": "update.downloadUpdate"
  },
  {
    "command": "update.downloading"
  },
  {
    "command": "update.install"
  },
  {
    "command": "update.installUpdate"
  },
  {
    "command": "update.restart"
  },
  {
    "command": "update.restartToUpdate"
  },
  {
    "command": "update.showCurrentReleaseNotes"
  },
  {
    "command": "update.showUpdateReleaseNotes"
  },
  {
    "command": "update.updating"
  },
  {
    "command": "variables.collapse"
  },
  {
    "command": "vscode-docker.activateRegistryProviders"
  },
  {
    "command": "vscode-docker.compose.down"
  },
  {
    "command": "vscode-docker.compose.restart"
  },
  {
    "command": "vscode-docker.compose.up"
  },
  {
    "command": "vscode-docker.compose.up.subset"
  },
  {
    "command": "vscode-docker.configure"
  },
  {
    "command": "vscode-docker.configureCompose"
  },
  {
    "command": "vscode-docker.containers.attachShell"
  },
  {
    "command": "vscode-docker.containers.browse"
  },
  {
    "command": "vscode-docker.containers.composeGroup.down"
  },
  {
    "command": "vscode-docker.containers.composeGroup.logs"
  },
  {
    "command": "vscode-docker.containers.composeGroup.restart"
  },
  {
    "command": "vscode-docker.containers.composeGroup.start"
  },
  {
    "command": "vscode-docker.containers.composeGroup.stop"
  },
  {
    "command": "vscode-docker.containers.configureExplorer"
  },
  {
    "command": "vscode-docker.containers.downloadFile"
  },
  {
    "command": "vscode-docker.containers.group.remove"
  },
  {
    "command": "vscode-docker.containers.inspect"
  },
  {
    "command": "vscode-docker.containers.openFile"
  },
  {
    "command": "vscode-docker.containers.prune"
  },
  {
    "command": "vscode-docker.containers.refresh"
  },
  {
    "command": "vscode-docker.containers.remove"
  },
  {
    "command": "vscode-docker.containers.restart"
  },
  {
    "command": "vscode-docker.containers.select"
  },
  {
    "command": "vscode-docker.containers.start"
  },
  {
    "command": "vscode-docker.containers.stats"
  },
  {
    "command": "vscode-docker.containers.stop"
  },
  {
    "command": "vscode-docker.containers.viewLogs"
  },
  {
    "command": "vscode-docker.contexts.configureExplorer"
  },
  {
    "command": "vscode-docker.contexts.help"
  },
  {
    "command": "vscode-docker.contexts.inspect"
  },
  {
    "command": "vscode-docker.contexts.refresh"
  },
  {
    "command": "vscode-docker.contexts.remove"
  },
  {
    "command": "vscode-docker.contexts.use"
  },
  {
    "command": "vscode-docker.debugging.initializeForDebugging"
  },
  {
    "command": "vscode-docker.help"
  },
  {
    "command": "vscode-docker.help.openWalkthrough"
  },
  {
    "command": "vscode-docker.help.reportIssue"
  },
  {
    "command": "vscode-docker.images.build"
  },
  {
    "command": "vscode-docker.images.configureExplorer"
  },
  {
    "command": "vscode-docker.images.copyFullTag"
  },
  {
    "command": "vscode-docker.images.group.remove"
  },
  {
    "command": "vscode-docker.images.hideDangling"
  },
  {
    "command": "vscode-docker.images.inspect"
  },
  {
    "command": "vscode-docker.images.prune"
  },
  {
    "command": "vscode-docker.images.pull"
  },
  {
    "command": "vscode-docker.images.push"
  },
  {
    "command": "vscode-docker.images.refresh"
  },
  {
    "command": "vscode-docker.images.remove"
  },
  {
    "command": "vscode-docker.images.run"
  },
  {
    "command": "vscode-docker.images.runAzureCli"
  },
  {
    "command": "vscode-docker.images.runInteractive"
  },
  {
    "command": "vscode-docker.images.showDangling"
  },
  {
    "command": "vscode-docker.images.tag"
  },
  {
    "command": "vscode-docker.networks.configureExplorer"
  },
  {
    "command": "vscode-docker.networks.create"
  },
  {
    "command": "vscode-docker.networks.inspect"
  },
  {
    "command": "vscode-docker.networks.prune"
  },
  {
    "command": "vscode-docker.networks.refresh"
  },
  {
    "command": "vscode-docker.networks.remove"
  },
  {
    "command": "vscode-docker.openDockerDownloadPage"
  },
  {
    "command": "vscode-docker.pruneSystem"
  },
  {
    "command": "vscode-docker.registries.azure.buildImage"
  },
  {
    "command": "vscode-docker.registries.azure.createRegistry"
  },
  {
    "command": "vscode-docker.registries.azure.deleteRegistry"
  },
  {
    "command": "vscode-docker.registries.azure.deleteRepository"
  },
  {
    "command": "vscode-docker.registries.azure.openInPortal"
  },
  {
    "command": "vscode-docker.registries.azure.untagImage"
  },
  {
    "command": "vscode-docker.registries.azure.viewProperties"
  },
  {
    "command": "vscode-docker.registries.connectRegistry"
  },
  {
    "command": "vscode-docker.registries.copyImageDigest"
  },
  {
    "command": "vscode-docker.registries.copyRemoteFullTag"
  },
  {
    "command": "vscode-docker.registries.deleteImage"
  },
  {
    "command": "vscode-docker.registries.deployImageToAca"
  },
  {
    "command": "vscode-docker.registries.deployImageToAzure"
  },
  {
    "command": "vscode-docker.registries.disconnectRegistry"
  },
  {
    "command": "vscode-docker.registries.dockerHub.openInBrowser"
  },
  {
    "command": "vscode-docker.registries.genericV2.addTrackedRegistry"
  },
  {
    "command": "vscode-docker.registries.genericV2.removeTrackedRegistry"
  },
  {
    "command": "vscode-docker.registries.help"
  },
  {
    "command": "vscode-docker.registries.inspectRemoteImageManifest"
  },
  {
    "command": "vscode-docker.registries.logInToDockerCli"
  },
  {
    "command": "vscode-docker.registries.logOutOfDockerCli"
  },
  {
    "command": "vscode-docker.registries.pullImage"
  },
  {
    "command": "vscode-docker.registries.pullRepository"
  },
  {
    "command": "vscode-docker.registries.reconnectRegistry"
  },
  {
    "command": "vscode-docker.registries.refresh"
  },
  {
    "command": "vscode-docker.views.dockerContexts.focus"
  },
  {
    "command": "vscode-docker.views.dockerContexts.removeView"
  },
  {
    "command": "vscode-docker.views.dockerContexts.resetViewLocation"
  },
  {
    "command": "vscode-docker.views.dockerContexts.toggleVisibility"
  },
  {
    "command": "vscode-docker.views.help.focus"
  },
  {
    "command": "vscode-docker.views.help.removeView"
  },
  {
    "command": "vscode-docker.views.help.resetViewLocation"
  },
  {
    "command": "vscode-docker.views.help.toggleVisibility"
  },
  {
    "command": "vscode-docker.volumes.configureExplorer"
  },
  {
    "command": "vscode-docker.volumes.inspect"
  },
  {
    "command": "vscode-docker.volumes.prune"
  },
  {
    "command": "vscode-docker.volumes.refresh"
  },
  {
    "command": "vscode-docker.volumes.remove"
  },
  {
    "command": "vscode-edge-devtools-view.attach"
  },
  {
    "command": "vscode-edge-devtools-view.close-instance"
  },
  {
    "command": "vscode-edge-devtools-view.configureLaunchJson"
  },
  {
    "command": "vscode-edge-devtools-view.copyItem"
  },
  {
    "command": "vscode-edge-devtools-view.cssMirrorContent"
  },
  {
    "command": "vscode-edge-devtools-view.help-links.focus"
  },
  {
    "command": "vscode-edge-devtools-view.help-links.removeView"
  },
  {
    "command": "vscode-edge-devtools-view.help-links.resetViewLocation"
  },
  {
    "command": "vscode-edge-devtools-view.help-links.toggleVisibility"
  },
  {
    "command": "vscode-edge-devtools-view.launch"
  },
  {
    "command": "vscode-edge-devtools-view.launchHtml"
  },
  {
    "command": "vscode-edge-devtools-view.launchProject"
  },
  {
    "command": "vscode-edge-devtools-view.launchScreencast"
  },
  {
    "command": "vscode-edge-devtools-view.openSettings"
  },
  {
    "command": "vscode-edge-devtools-view.refresh"
  },
  {
    "command": "vscode-edge-devtools-view.targets.focus"
  },
  {
    "command": "vscode-edge-devtools-view.targets.removeView"
  },
  {
    "command": "vscode-edge-devtools-view.targets.resetViewLocation"
  },
  {
    "command": "vscode-edge-devtools-view.targets.toggleVisibility"
  },
  {
    "command": "vscode-edge-devtools-view.toggleInspect"
  },
  {
    "command": "vscode-edge-devtools-view.toggleScreencast"
  },
  {
    "command": "vscode-edge-devtools-view.viewChangelog"
  },
  {
    "command": "vscode-edge-devtools-view.viewDocumentation"
  },
  {
    "command": "vscode-edge-devtools.attach"
  },
  {
    "command": "vscode-edge-devtools.attachToCurrentDebugTarget"
  },
  {
    "command": "vscode-edge-devtools.launch"
  },
  {
    "command": "vscode-webhint/apply-code-fix"
  },
  {
    "command": "vscode-webhint/edit-hintrc-project"
  },
  {
    "command": "vscode-webhint/ignore-axe-rule-project"
  },
  {
    "command": "vscode-webhint/ignore-browsers-project"
  },
  {
    "command": "vscode-webhint/ignore-feature-project"
  },
  {
    "command": "vscode-webhint/ignore-hint-project"
  },
  {
    "command": "walkthroughs.selectStep"
  },
  {
    "command": "watch.collapse"
  },
  {
    "command": "welcome.markStepComplete"
  },
  {
    "command": "welcome.markStepIncomplete"
  },
  {
    "command": "welcome.showAllWalkthroughs"
  },
  {
    "command": "workbench.action.acceptSelectedQuickOpenItem"
  },
  {
    "command": "workbench.action.activityBarLocation.bottom"
  },
  {
    "command": "workbench.action.activityBarLocation.default"
  },
  {
    "command": "workbench.action.activityBarLocation.hide"
  },
  {
    "command": "workbench.action.activityBarLocation.top"
  },
  {
    "command": "workbench.action.addRootFolder"
  },
  {
    "command": "workbench.action.alignPanelCenter"
  },
  {
    "command": "workbench.action.alignPanelJustify"
  },
  {
    "command": "workbench.action.alignPanelLeft"
  },
  {
    "command": "workbench.action.alignPanelRight"
  },
  {
    "command": "workbench.action.alternativeAcceptSelectedQuickOpenItem"
  },
  {
    "command": "workbench.action.blur"
  },
  {
    "command": "workbench.action.browseColorThemesInMarketplace"
  },
  {
    "command": "workbench.action.chat.addDynamicVariable"
  },
  {
    "command": "workbench.action.chat.addParticipant"
  },
  {
    "command": "workbench.action.chat.applyAll"
  },
  {
    "command": "workbench.action.chat.applyCompareEdits"
  },
  {
    "command": "workbench.action.chat.assignSelectedAgent"
  },
  {
    "command": "workbench.action.chat.attachFile"
  },
  {
    "command": "workbench.action.chat.attachSelection"
  },
  {
    "command": "workbench.action.chat.clearHistory"
  },
  {
    "command": "workbench.action.chat.clearInputHistory"
  },
  {
    "command": "workbench.action.chat.copyAll"
  },
  {
    "command": "workbench.action.chat.copyCodeBlock"
  },
  {
    "command": "workbench.action.chat.copyItem"
  },
  {
    "command": "workbench.action.chat.discardCompareEdits"
  },
  {
    "command": "workbench.action.chat.export"
  },
  {
    "command": "workbench.action.chat.history"
  },
  {
    "command": "workbench.action.chat.import"
  },
  {
    "command": "workbench.action.chat.inlineVoiceChat"
  },
  {
    "command": "workbench.action.chat.insertIntoNewFile"
  },
  {
    "command": "workbench.action.chat.insertIntoNotebook"
  },
  {
    "command": "workbench.action.chat.installProviderForVoiceChat"
  },
  {
    "command": "workbench.action.chat.logInputHistory"
  },
  {
    "command": "workbench.action.chat.markHelpful"
  },
  {
    "command": "workbench.action.chat.markUnhelpful"
  },
  {
    "command": "workbench.action.chat.openInEditor"
  },
  {
    "command": "workbench.action.chat.openInNewWindow"
  },
  {
    "command": "workbench.action.chat.openInSidebar"
  },
  {
    "command": "workbench.action.chat.quickVoiceChat"
  },
  {
    "command": "workbench.action.chat.readChatResponseAloud"
  },
  {
    "command": "workbench.action.chat.reportIssueForBug"
  },
  {
    "command": "workbench.action.chat.retry"
  },
  {
    "command": "workbench.action.chat.selectAndInsertFile"
  },
  {
    "command": "workbench.action.chat.voiceChatInChatView"
  },
  {
    "command": "workbench.action.chatEditor.newChat"
  },
  {
    "command": "workbench.action.clearCommandHistory"
  },
  {
    "command": "workbench.action.clearEditorHistory"
  },
  {
    "command": "workbench.action.clearLocalePreference"
  },
  {
    "command": "workbench.action.clearRecentFiles"
  },
  {
    "command": "workbench.action.closeActivePinnedEditor"
  },
  {
    "command": "workbench.action.closeAuxiliaryBar"
  },
  {
    "command": "workbench.action.closeEditorInAllGroups"
  },
  {
    "command": "workbench.action.closeEditorsAndGroup"
  },
  {
    "command": "workbench.action.closeEditorsInOtherGroups"
  },
  {
    "command": "workbench.action.closeEditorsToTheLeft"
  },
  {
    "command": "workbench.action.closeEditorsToTheRight"
  },
  {
    "command": "workbench.action.closeOtherEditors"
  },
  {
    "command": "workbench.action.closePanel"
  },
  {
    "command": "workbench.action.closeSidebar"
  },
  {
    "command": "workbench.action.collapseAllComments"
  },
  {
    "command": "workbench.action.compareEditor.focusOtherSide"
  },
  {
    "command": "workbench.action.compareEditor.focusPrimarySide"
  },
  {
    "command": "workbench.action.compareEditor.focusSecondarySide"
  },
  {
    "command": "workbench.action.compareEditor.swapSides"
  },
  {
    "command": "workbench.action.configureEditor"
  },
  {
    "command": "workbench.action.configureEditorTabs"
  },
  {
    "command": "workbench.action.configureLanguageBasedSettings"
  },
  {
    "command": "workbench.action.configureLocale"
  },
  {
    "command": "workbench.action.configureRuntimeArguments"
  },
  {
    "command": "workbench.action.continueOn.extensions"
  },
  {
    "command": "workbench.action.copyEditorGroupToNewWindow"
  },
  {
    "command": "workbench.action.createTerminalEditor"
  },
  {
    "command": "workbench.action.createTerminalEditorSameGroup"
  },
  {
    "command": "workbench.action.createTerminalEditorSide"
  },
  {
    "command": "workbench.action.customizeLayout"
  },
  {
    "command": "workbench.action.debug.callStackBottom"
  },
  {
    "command": "workbench.action.debug.callStackDown"
  },
  {
    "command": "workbench.action.debug.callStackTop"
  },
  {
    "command": "workbench.action.debug.callStackUp"
  },
  {
    "command": "workbench.action.debug.configure"
  },
  {
    "command": "workbench.action.debug.disconnectAndSuspend"
  },
  {
    "command": "workbench.action.debug.focusProcess"
  },
  {
    "command": "workbench.action.debug.restartFrame"
  },
  {
    "command": "workbench.action.debug.reverseContinue"
  },
  {
    "command": "workbench.action.debug.selectDebugConsole"
  },
  {
    "command": "workbench.action.debug.selectDebugSession"
  },
  {
    "command": "workbench.action.debug.selectRepl"
  },
  {
    "command": "workbench.action.debug.selectandstart"
  },
  {
    "command": "workbench.action.debug.showLoadedScripts"
  },
  {
    "command": "workbench.action.debug.stepBack"
  },
  {
    "command": "workbench.action.debug.terminateThread"
  },
  {
    "command": "workbench.action.decreaseViewHeight"
  },
  {
    "command": "workbench.action.decreaseViewSize"
  },
  {
    "command": "workbench.action.decreaseViewWidth"
  },
  {
    "command": "workbench.action.download"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupDown"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupLeft"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupRight"
  },
  {
    "command": "workbench.action.duplicateActiveEditorGroupUp"
  },
  {
    "command": "workbench.action.duplicateWorkspaceInNewWindow"
  },
  {
    "command": "workbench.action.editor.changeEOL"
  },
  {
    "command": "workbench.action.editor.changeEncoding"
  },
  {
    "command": "workbench.action.editorActionsDefault"
  },
  {
    "command": "workbench.action.editorActionsTitleBar"
  },
  {
    "command": "workbench.action.editorLayoutSingle"
  },
  {
    "command": "workbench.action.editorLayoutThreeColumns"
  },
  {
    "command": "workbench.action.editorLayoutThreeRows"
  },
  {
    "command": "workbench.action.editorLayoutTwoByTwoGrid"
  },
  {
    "command": "workbench.action.editorLayoutTwoColumns"
  },
  {
    "command": "workbench.action.editorLayoutTwoColumnsBottom"
  },
  {
    "command": "workbench.action.editorLayoutTwoRows"
  },
  {
    "command": "workbench.action.editorLayoutTwoRowsRight"
  },
  {
    "command": "workbench.action.evenEditorWidths"
  },
  {
    "command": "workbench.action.expandAllComments"
  },
  {
    "command": "workbench.action.expandUnresolvedComments"
  },
  {
    "command": "workbench.action.extensionHostProfiler.stop"
  },
  {
    "command": "workbench.action.files.newFile"
  },
  {
    "command": "workbench.action.files.openFileFolderInNewWindow"
  },
  {
    "command": "workbench.action.files.openFileInNewWindow"
  },
  {
    "command": "workbench.action.files.openFolderInNewWindow"
  },
  {
    "command": "workbench.action.files.resetActiveEditorReadonlyInSession"
  },
  {
    "command": "workbench.action.files.revert"
  },
  {
    "command": "workbench.action.files.saveAll"
  },
  {
    "command": "workbench.action.files.saveFiles"
  },
  {
    "command": "workbench.action.files.setActiveEditorReadonlyInSession"
  },
  {
    "command": "workbench.action.files.setActiveEditorWriteableInSession"
  },
  {
    "command": "workbench.action.files.showOpenedFileInNewWindow"
  },
  {
    "command": "workbench.action.files.toggleActiveEditorReadonlyInSession"
  },
  {
    "command": "workbench.action.firstEditorInGroup"
  },
  {
    "command": "workbench.action.focusAboveGroupWithoutWrap"
  },
  {
    "command": "workbench.action.focusActiveEditorGroup"
  },
  {
    "command": "workbench.action.focusActivityBar"
  },
  {
    "command": "workbench.action.focusAuxiliaryBar"
  },
  {
    "command": "workbench.action.focusBanner"
  },
  {
    "command": "workbench.action.focusBelowGroupWithoutWrap"
  },
  {
    "command": "workbench.action.focusCommentOnCurrentLine"
  },
  {
    "command": "workbench.action.focusCommentsPanel"
  },
  {
    "command": "workbench.action.focusFirstSideEditor"
  },
  {
    "command": "workbench.action.focusLastEditorGroup"
  },
  {
    "command": "workbench.action.focusLeftGroupWithoutWrap"
  },
  {
    "command": "workbench.action.focusNextGroup"
  },
  {
    "command": "workbench.action.focusOtherSideEditor"
  },
  {
    "command": "workbench.action.focusPanel"
  },
  {
    "command": "workbench.action.focusPreviousGroup"
  },
  {
    "command": "workbench.action.focusQuickOpen"
  },
  {
    "command": "workbench.action.focusRightGroupWithoutWrap"
  },
  {
    "command": "workbench.action.focusSecondSideEditor"
  },
  {
    "command": "workbench.action.focusStatusBar"
  },
  {
    "command": "workbench.action.focusTitleBar"
  },
  {
    "command": "workbench.action.generateColorTheme"
  },
  {
    "command": "workbench.action.getStartedWithAccessibilityFeatures"
  },
  {
    "command": "workbench.action.hideEditorActions"
  },
  {
    "command": "workbench.action.hideEditorTabs"
  },
  {
    "command": "workbench.action.holdLockedScrolling"
  },
  {
    "command": "workbench.action.increaseViewHeight"
  },
  {
    "command": "workbench.action.increaseViewSize"
  },
  {
    "command": "workbench.action.increaseViewWidth"
  },
  {
    "command": "workbench.action.inspectContextKeys"
  },
  {
    "command": "workbench.action.inspectKeyMappings"
  },
  {
    "command": "workbench.action.inspectKeyMappingsJSON"
  },
  {
    "command": "workbench.action.joinAllGroups"
  },
  {
    "command": "workbench.action.joinTwoGroups"
  },
  {
    "command": "workbench.action.localHistory.compareWithFile"
  },
  {
    "command": "workbench.action.localHistory.compareWithPrevious"
  },
  {
    "command": "workbench.action.localHistory.compareWithSelected"
  },
  {
    "command": "workbench.action.localHistory.create"
  },
  {
    "command": "workbench.action.localHistory.delete"
  },
  {
    "command": "workbench.action.localHistory.deleteAll"
  },
  {
    "command": "workbench.action.localHistory.open"
  },
  {
    "command": "workbench.action.localHistory.rename"
  },
  {
    "command": "workbench.action.localHistory.restore"
  },
  {
    "command": "workbench.action.localHistory.restoreViaEditor"
  },
  {
    "command": "workbench.action.localHistory.restoreViaPicker"
  },
  {
    "command": "workbench.action.localHistory.revealInOS"
  },
  {
    "command": "workbench.action.localHistory.selectForCompare"
  },
  {
    "command": "workbench.action.lockEditorGroup"
  },
  {
    "command": "workbench.action.logStorage"
  },
  {
    "command": "workbench.action.logWorkingCopies"
  },
  {
    "command": "workbench.action.manageTrustedDomain"
  },
  {
    "command": "workbench.action.maximizeEditorHideSidebar"
  },
  {
    "command": "workbench.action.minimizeOtherEditors"
  },
  {
    "command": "workbench.action.minimizeOtherEditorsHideSidebar"
  },
  {
    "command": "workbench.action.moveEditorGroupToNewWindow"
  },
  {
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  {
    "command": "workbench.action.moveEditorToBelowGroup"
  },
  {
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  {
    "command": "workbench.action.moveEditorToNewWindow"
  },
  {
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "command": "workbench.action.moveFocusedView"
  },
  {
    "command": "workbench.action.movePanelToSecondarySideBar"
  },
  {
    "command": "workbench.action.movePanelToSidePanel"
  },
  {
    "command": "workbench.action.moveSecondarySideBarToPanel"
  },
  {
    "command": "workbench.action.moveSideBarLeft"
  },
  {
    "command": "workbench.action.moveSideBarRight"
  },
  {
    "command": "workbench.action.moveSidePanelToPanel"
  },
  {
    "command": "workbench.action.moveView"
  },
  {
    "command": "workbench.action.navigateBackInEditLocations"
  },
  {
    "command": "workbench.action.navigateBackInNavigationLocations"
  },
  {
    "command": "workbench.action.navigateDown"
  },
  {
    "command": "workbench.action.navigateEditorGroups"
  },
  {
    "command": "workbench.action.navigateForwardInEditLocations"
  },
  {
    "command": "workbench.action.navigateForwardInNavigationLocations"
  },
  {
    "command": "workbench.action.navigateLast"
  },
  {
    "command": "workbench.action.navigateLeft"
  },
  {
    "command": "workbench.action.navigatePreviousInEditLocations"
  },
  {
    "command": "workbench.action.navigatePreviousInNavigationLocations"
  },
  {
    "command": "workbench.action.navigateRight"
  },
  {
    "command": "workbench.action.navigateToLastNavigationLocation"
  },
  {
    "command": "workbench.action.navigateUp"
  },
  {
    "command": "workbench.action.newEmptyEditorWindow"
  },
  {
    "command": "workbench.action.newGroupAbove"
  },
  {
    "command": "workbench.action.newGroupBelow"
  },
  {
    "command": "workbench.action.newGroupLeft"
  },
  {
    "command": "workbench.action.newGroupRight"
  },
  {
    "command": "workbench.action.nextPanelView"
  },
  {
    "command": "workbench.action.nextSideBarView"
  },
  {
    "command": "workbench.action.openAccessibilitySettings"
  },
  {
    "command": "workbench.action.openActiveLogOutputFile"
  },
  {
    "command": "workbench.action.openActiveLogOutputFileInNewWindow"
  },
  {
    "command": "workbench.action.openApplicationSettingsJson"
  },
  {
    "command": "workbench.action.openChat"
  },
  {
    "command": "workbench.action.openDefaultKeybindingsFile"
  },
  {
    "command": "workbench.action.openDocumentationUrl"
  },
  {
    "command": "workbench.action.openEditorAtIndex"
  },
  {
    "command": "workbench.action.openExtensionLogsFolder"
  },
  {
    "command": "workbench.action.openFolderSettings"
  },
  {
    "command": "workbench.action.openFolderSettingsFile"
  },
  {
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  {
    "command": "workbench.action.openGlobalSettings"
  },
  {
    "command": "workbench.action.openIssueReporter"
  },
  {
    "command": "workbench.action.openLicenseUrl"
  },
  {
    "command": "workbench.action.openLogFile"
  },
  {
    "command": "workbench.action.openLogsFolder"
  },
  {
    "command": "workbench.action.openNewsletterSignupUrl"
  },
  {
    "command": "workbench.action.openNextRecentlyUsedEditor"
  },
  {
    "command": "workbench.action.openNextRecentlyUsedEditorInGroup"
  },
  {
    "command": "workbench.action.openPreviousEditorFromHistory"
  },
  {
    "command": "workbench.action.openPreviousRecentlyUsedEditor"
  },
  {
    "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup"
  },
  {
    "command": "workbench.action.openPrivacyStatementUrl"
  },
  {
    "command": "workbench.action.openProcessExplorer"
  },
  {
    "command": "workbench.action.openProfile.Default"
  },
  {
    "command": "workbench.action.openQuickChat"
  },
  {
    "command": "workbench.action.openRawDefaultSettings"
  },
  {
    "command": "workbench.action.openRemoteSettings"
  },
  {
    "command": "workbench.action.openRemoteSettingsFile"
  },
  {
    "command": "workbench.action.openRequestFeatureUrl"
  },
  {
    "command": "workbench.action.openSettings2"
  },
  {
    "command": "workbench.action.openSettingsJson"
  },
  {
    "command": "workbench.action.openSnippets"
  },
  {
    "command": "workbench.action.openTipsAndTricksUrl"
  },
  {
    "command": "workbench.action.openUserDataFolder"
  },
  {
    "command": "workbench.action.openVideoTutorialsUrl"
  },
  {
    "command": "workbench.action.openView"
  },
  {
    "command": "workbench.action.openWalkthrough"
  },
  {
    "command": "workbench.action.openWorkspace"
  },
  {
    "command": "workbench.action.openWorkspaceConfigFile"
  },
  {
    "command": "workbench.action.openWorkspaceFromEditor"
  },
  {
    "command": "workbench.action.openWorkspaceInNewWindow"
  },
  {
    "command": "workbench.action.openWorkspaceSettings"
  },
  {
    "command": "workbench.action.openWorkspaceSettingsFile"
  },
  {
    "command": "workbench.action.openYouTubeUrl"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevel.0"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevel.1"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevel.2"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevel.3"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevel.4"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevel.5"
  },
  {
    "command": "workbench.action.output.activeOutputLogLevelDefault"
  },
  {
    "command": "workbench.action.output.show.GitHub.copilot-chat.GitHub Copilot Chat"
  },
  {
    "command": "workbench.action.output.show.GitHub.copilot.GitHub Copilot"
  },
  {
    "command": "workbench.action.output.show.editSessions"
  },
  {
    "command": "workbench.action.output.show.extension-output-esbenp.prettier-vscode-#1-Prettier"
  },
  {
    "command": "workbench.action.output.show.extension-output-ms-edgedevtools.vscode-edge-devtools-#1-Microsoft Edge Tools"
  },
  {
    "command": "workbench.action.output.show.extension-output-vscode.html-language-features-#1-HTML Language Server"
  },
  {
    "command": "workbench.action.output.show.exthost"
  },
  {
    "command": "workbench.action.output.show.main"
  },
  {
    "command": "workbench.action.output.show.notebook.rendering"
  },
  {
    "command": "workbench.action.output.show.ptyhost"
  },
  {
    "command": "workbench.action.output.show.remoteTunnelService"
  },
  {
    "command": "workbench.action.output.show.rendererLog"
  },
  {
    "command": "workbench.action.output.show.sharedprocess"
  },
  {
    "command": "workbench.action.output.show.tasks"
  },
  {
    "command": "workbench.action.output.show.terminal"
  },
  {
    "command": "workbench.action.output.show.userDataSync"
  },
  {
    "command": "workbench.action.output.show.vscode.git.Git"
  },
  {
    "command": "workbench.action.output.show.vscode.github-authentication.GitHub Authentication"
  },
  {
    "command": "workbench.action.output.show.vscode.github.GitHub"
  },
  {
    "command": "workbench.action.output.show.vscode.json-language-features.JSON Language Server"
  },
  {
    "command": "workbench.action.output.show.vscode.typescript-language-features.TypeScript"
  },
  {
    "command": "workbench.action.pauseSocketWriting"
  },
  {
    "command": "workbench.action.populateFileFromSnippet"
  },
  {
    "command": "workbench.action.positionPanelBottom"
  },
  {
    "command": "workbench.action.positionPanelLeft"
  },
  {
    "command": "workbench.action.positionPanelRight"
  },
  {
    "command": "workbench.action.positionPanelTop"
  },
  {
    "command": "workbench.action.previewColorTheme"
  },
  {
    "command": "workbench.action.previousPanelView"
  },
  {
    "command": "workbench.action.previousSideBarView"
  },
  {
    "command": "workbench.action.problems.focus"
  },
  {
    "command": "workbench.action.quickOpenLeastRecentlyUsedEditor"
  },
  {
    "command": "workbench.action.quickOpenNavigateNext"
  },
  {
    "command": "workbench.action.quickOpenNavigateNextInTerminalPicker"
  },
  {
    "command": "workbench.action.quickOpenNavigatePrevious"
  },
  {
    "command": "workbench.action.quickOpenNavigatePreviousInTerminalPicker"
  },
  {
    "command": "workbench.action.quickOpenPreviousEditor"
  },
  {
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor"
  },
  {
    "command": "workbench.action.quickOpenRecent"
  },
  {
    "command": "workbench.action.quickOpenSelectNext"
  },
  {
    "command": "workbench.action.quickOpenSelectPrevious"
  },
  {
    "command": "workbench.action.quickOpenTerm"
  },
  {
    "command": "workbench.action.quickOpenWithModes"
  },
  {
    "command": "workbench.action.quickPickManyToggle"
  },
  {
    "command": "workbench.action.quickSwitchWindow"
  },
  {
    "command": "workbench.action.quickTextSearch"
  },
  {
    "command": "workbench.action.quickchat.close"
  },
  {
    "command": "workbench.action.quickchat.launchInlineChat"
  },
  {
    "command": "workbench.action.quickchat.openInChatView"
  },
  {
    "command": "workbench.action.quit"
  },
  {
    "command": "workbench.action.reloadWindowWithExtensionsDisabled"
  },
  {
    "command": "workbench.action.remote.close"
  },
  {
    "command": "workbench.action.remote.extensions"
  },
  {
    "command": "workbench.action.removeLargeStorageDatabaseEntries"
  },
  {
    "command": "workbench.action.removeRootFolder"
  },
  {
    "command": "workbench.action.reopenTextEditor"
  },
  {
    "command": "workbench.action.reopenWithEditor"
  },
  {
    "command": "workbench.action.reportPerformanceIssueUsingReporter"
  },
  {
    "command": "workbench.action.resetFocusedViewLocation"
  },
  {
    "command": "workbench.action.resetViewLocations"
  },
  {
    "command": "workbench.action.restartExtensionHost"
  },
  {
    "command": "workbench.action.restoreEditorsToMainWindow"
  },
  {
    "command": "workbench.action.revertAndCloseActiveEditor"
  },
  {
    "command": "workbench.action.saveWorkspaceAs"
  },
  {
    "command": "workbench.action.selectIconTheme"
  },
  {
    "command": "workbench.action.selectProductIconTheme"
  },
  {
    "command": "workbench.action.setDefaultLogLevel"
  },
  {
    "command": "workbench.action.setLogLevel"
  },
  {
    "command": "workbench.action.showAboutDialog"
  },
  {
    "command": "workbench.action.showAllEditorsByMostRecentlyUsed"
  },
  {
    "command": "workbench.action.showEditorActions"
  },
  {
    "command": "workbench.action.showEditorTab"
  },
  {
    "command": "workbench.action.showEditorsInActiveGroup"
  },
  {
    "command": "workbench.action.showEditorsInGroup"
  },
  {
    "command": "workbench.action.showEmmetCommands"
  },
  {
    "command": "workbench.action.showErrorsWarnings"
  },
  {
    "command": "workbench.action.showInteractivePlayground"
  },
  {
    "command": "workbench.action.showLogs"
  },
  {
    "command": "workbench.action.showMultipleEditorTabs"
  },
  {
    "command": "workbench.action.showOutputChannels"
  },
  {
    "command": "workbench.action.showRuntimeExtensions"
  },
  {
    "command": "workbench.action.showWindowLog"
  },
  {
    "command": "workbench.action.splitEditorToAboveGroup"
  },
  {
    "command": "workbench.action.splitEditorToBelowGroup"
  },
  {
    "command": "workbench.action.splitEditorToFirstGroup"
  },
  {
    "command": "workbench.action.splitEditorToLastGroup"
  },
  {
    "command": "workbench.action.splitEditorToLeftGroup"
  },
  {
    "command": "workbench.action.splitEditorToNextGroup"
  },
  {
    "command": "workbench.action.splitEditorToPreviousGroup"
  },
  {
    "command": "workbench.action.splitEditorToRightGroup"
  },
  {
    "command": "workbench.action.stopTracing"
  },
  {
    "command": "workbench.action.switchWindow"
  },
  {
    "command": "workbench.action.tasks.configureDefaultBuildTask"
  },
  {
    "command": "workbench.action.tasks.configureDefaultTestTask"
  },
  {
    "command": "workbench.action.tasks.configureTaskRunner"
  },
  {
    "command": "workbench.action.tasks.manageAutomaticRunning"
  },
  {
    "command": "workbench.action.tasks.openUserTasks"
  },
  {
    "command": "workbench.action.tasks.openWorkspaceFileTasks"
  },
  {
    "command": "workbench.action.tasks.reRunTask"
  },
  {
    "command": "workbench.action.tasks.restartTask"
  },
  {
    "command": "workbench.action.tasks.runTask"
  },
  {
    "command": "workbench.action.tasks.showLog"
  },
  {
    "command": "workbench.action.tasks.showTasks"
  },
  {
    "command": "workbench.action.tasks.terminate"
  },
  {
    "command": "workbench.action.tasks.test"
  },
  {
    "command": "workbench.action.tasks.toggleProblems"
  },
  {
    "command": "workbench.action.terminal.attachToSession"
  },
  {
    "command": "workbench.action.terminal.changeColor"
  },
  {
    "command": "workbench.action.terminal.changeColorActiveTab"
  },
  {
    "command": "workbench.action.terminal.changeIcon"
  },
  {
    "command": "workbench.action.terminal.changeIconActiveTab"
  },
  {
    "command": "workbench.action.terminal.chat.cancel"
  },
  {
    "command": "workbench.action.terminal.chat.discard"
  },
  {
    "command": "workbench.action.terminal.chat.viewInChat"
  },
  {
    "command": "workbench.action.terminal.clear"
  },
  {
    "command": "workbench.action.terminal.clearPreviousSessionHistory"
  },
  {
    "command": "workbench.action.terminal.clearSuggestCache"
  },
  {
    "command": "workbench.action.terminal.copyLastCommand"
  },
  {
    "command": "workbench.action.terminal.copyLastCommandAndLastCommandOutput"
  },
  {
    "command": "workbench.action.terminal.copyLastCommandOutput"
  },
  {
    "command": "workbench.action.terminal.copySelectionAsHtml"
  },
  {
    "command": "workbench.action.terminal.detachSession"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex1"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex2"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex3"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex4"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex5"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex6"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex7"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex8"
  },
  {
    "command": "workbench.action.terminal.focusAtIndex9"
  },
  {
    "command": "workbench.action.terminal.fontZoomIn"
  },
  {
    "command": "workbench.action.terminal.fontZoomOut"
  },
  {
    "command": "workbench.action.terminal.fontZoomReset"
  },
  {
    "command": "workbench.action.terminal.join"
  },
  {
    "command": "workbench.action.terminal.joinActiveTab"
  },
  {
    "command": "workbench.action.terminal.kill"
  },
  {
    "command": "workbench.action.terminal.killAll"
  },
  {
    "command": "workbench.action.terminal.killViewOrEditor"
  },
  {
    "command": "workbench.action.terminal.moveIntoNewWindow"
  },
  {
    "command": "workbench.action.terminal.moveToEditor"
  },
  {
    "command": "workbench.action.terminal.moveToTerminalPanel"
  },
  {
    "command": "workbench.action.terminal.newInActiveWorkspace"
  },
  {
    "command": "workbench.action.terminal.newWithCwd"
  },
  {
    "command": "workbench.action.terminal.newWithProfile"
  },
  {
    "command": "workbench.action.terminal.openFileLink"
  },
  {
    "command": "workbench.action.terminal.openSettings"
  },
  {
    "command": "workbench.action.terminal.openUrlLink"
  },
  {
    "command": "workbench.action.terminal.recordSession"
  },
  {
    "command": "workbench.action.terminal.relaunch"
  },
  {
    "command": "workbench.action.terminal.rename"
  },
  {
    "command": "workbench.action.terminal.renameWithArg"
  },
  {
    "command": "workbench.action.terminal.resizePaneDown"
  },
  {
    "command": "workbench.action.terminal.resizePaneLeft"
  },
  {
    "command": "workbench.action.terminal.resizePaneRight"
  },
  {
    "command": "workbench.action.terminal.resizePaneUp"
  },
  {
    "command": "workbench.action.terminal.restartPtyHost"
  },
  {
    "command": "workbench.action.terminal.runActiveFile"
  },
  {
    "command": "workbench.action.terminal.runSelectedText"
  },
  {
    "command": "workbench.action.terminal.selectAll"
  },
  {
    "command": "workbench.action.terminal.selectDefaultShell"
  },
  {
    "command": "workbench.action.terminal.selectToNextLine"
  },
  {
    "command": "workbench.action.terminal.selectToPreviousLine"
  },
  {
    "command": "workbench.action.terminal.setDimensions"
  },
  {
    "command": "workbench.action.terminal.showEnvironmentContributions"
  },
  {
    "command": "workbench.action.terminal.showTextureAtlas"
  },
  {
    "command": "workbench.action.terminal.splitInActiveWorkspace"
  },
  {
    "command": "workbench.action.terminal.switchTerminal"
  },
  {
    "command": "workbench.action.terminal.toggleStickyScroll"
  },
  {
    "command": "workbench.action.terminal.unsplit"
  },
  {
    "command": "workbench.action.terminal.writeDataToTerminal"
  },
  {
    "command": "workbench.action.toggleActivityBarVisibility"
  },
  {
    "command": "workbench.action.toggleAutoSave"
  },
  {
    "command": "workbench.action.toggleCenteredLayout"
  },
  {
    "command": "workbench.action.toggleCommenting"
  },
  {
    "command": "workbench.action.toggleConfirmBeforeClose"
  },
  {
    "command": "workbench.action.toggleEditorGroupLock"
  },
  {
    "command": "workbench.action.toggleEditorType"
  },
  {
    "command": "workbench.action.toggleEditorVisibility"
  },
  {
    "command": "workbench.action.toggleEditorWidths"
  },
  {
    "command": "workbench.action.toggleKeepEditors"
  },
  {
    "command": "workbench.action.toggleKeybindingsLog"
  },
  {
    "command": "workbench.action.toggleLightDarkThemes"
  },
  {
    "command": "workbench.action.toggleLockedScrolling"
  },
  {
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "command": "workbench.action.toggleMenuBar"
  },
  {
    "command": "workbench.action.toggleMultiCursorModifier"
  },
  {
    "command": "workbench.action.toggleNotebookClipboardLog"
  },
  {
    "command": "workbench.action.toggleScreencastMode"
  },
  {
    "command": "workbench.action.toggleSearchOnType"
  },
  {
    "command": "workbench.action.toggleSeparatePinnedEditorTabs"
  },
  {
    "command": "workbench.action.toggleSidebarPosition"
  },
  {
    "command": "workbench.action.toggleSplitEditorInGroup"
  },
  {
    "command": "workbench.action.toggleSplitEditorInGroupLayout"
  },
  {
    "command": "workbench.action.toggleStatusbarVisibility"
  },
  {
    "command": "workbench.action.triggerReconnect"
  },
  {
    "command": "workbench.action.troubleshootIssue.start"
  },
  {
    "command": "workbench.action.troubleshootIssue.stop"
  },
  {
    "command": "workbench.action.unlockEditorGroup"
  },
  {
    "command": "workbench.action.url.openUrl"
  },
  {
    "command": "workbench.action.webview.openDeveloperTools"
  },
  {
    "command": "workbench.action.webview.reloadWebviewAction"
  },
  {
    "command": "workbench.action.zenHideEditorTabs"
  },
  {
    "command": "workbench.action.zenShowEditorTab"
  },
  {
    "command": "workbench.action.zenShowMultipleEditorTabs"
  },
  {
    "command": "workbench.actions.sync.editMachineName"
  },
  {
    "command": "workbench.actions.sync.loadActivity"
  },
  {
    "command": "workbench.actions.sync.turnOffSyncOnMachine"
  },
  {
    "command": "workbench.actions.sync.workbench.views.sync.localActivity.compareWithLocal"
  },
  {
    "command": "workbench.actions.sync.workbench.views.sync.localActivity.replaceCurrent"
  },
  {
    "command": "workbench.actions.sync.workbench.views.sync.localActivity.resolveResource"
  },
  {
    "command": "workbench.actions.sync.workbench.views.sync.remoteActivity.compareWithLocal"
  },
  {
    "command": "workbench.actions.sync.workbench.views.sync.remoteActivity.replaceCurrent"
  },
  {
    "command": "workbench.actions.sync.workbench.views.sync.remoteActivity.resolveResource"
  },
  {
    "command": "workbench.actions.syncData.reset"
  },
  {
    "command": "workbench.actions.table.workbench.panel.markers.view.viewAsTable"
  },
  {
    "command": "workbench.actions.table.workbench.panel.markers.view.viewAsTree"
  },
  {
    "command": "workbench.actions.treeView.workbench.panel.markers.view.collapseAll"
  },
  {
    "command": "workbench.actions.view.toggleProblems"
  },
  {
    "command": "workbench.actions.workbench.panel.comments.toggleResolvedComments"
  },
  {
    "command": "workbench.actions.workbench.panel.comments.toggleSortByResource"
  },
  {
    "command": "workbench.actions.workbench.panel.comments.toggleSortByUpdatedAt"
  },
  {
    "command": "workbench.actions.workbench.panel.comments.toggleUnResolvedComments"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleActiveFile"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleErrors"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleExcludedFiles"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleInfos"
  },
  {
    "command": "workbench.actions.workbench.panel.markers.view.toggleWarnings"
  },
  {
    "command": "workbench.debug.action.copyAll"
  },
  {
    "command": "workbench.debug.action.focusBreakpointsView"
  },
  {
    "command": "workbench.debug.action.focusCallStackView"
  },
  {
    "command": "workbench.debug.action.focusRepl"
  },
  {
    "command": "workbench.debug.action.focusVariablesView"
  },
  {
    "command": "workbench.debug.action.focusWatchView"
  },
  {
    "command": "workbench.debug.breakPointsView.resetViewLocation"
  },
  {
    "command": "workbench.debug.callStackView.resetViewLocation"
  },
  {
    "command": "workbench.debug.loadedScriptsView.focus"
  },
  {
    "command": "workbench.debug.loadedScriptsView.resetViewLocation"
  },
  {
    "command": "workbench.debug.panel.action.clearReplAction"
  },
  {
    "command": "workbench.debug.variablesView.resetViewLocation"
  },
  {
    "command": "workbench.debug.viewlet.action.addDataBreakpointOnAddress"
  },
  {
    "command": "workbench.debug.viewlet.action.addFunctionBreakpointAction"
  },
  {
    "command": "workbench.debug.viewlet.action.addWatchExpression"
  },
  {
    "command": "workbench.debug.viewlet.action.copyValue"
  },
  {
    "command": "workbench.debug.viewlet.action.copyWorkspaceVariableValue"
  },
  {
    "command": "workbench.debug.viewlet.action.disableAllBreakpoints"
  },
  {
    "command": "workbench.debug.viewlet.action.editDataBreakpointOnAddress"
  },
  {
    "command": "workbench.debug.viewlet.action.enableAllBreakpoints"
  },
  {
    "command": "workbench.debug.viewlet.action.reapplyBreakpointsAction"
  },
  {
    "command": "workbench.debug.viewlet.action.removeAllBreakpoints"
  },
  {
    "command": "workbench.debug.viewlet.action.removeAllWatchExpressions"
  },
  {
    "command": "workbench.debug.viewlet.action.removeBreakpoint"
  },
  {
    "command": "workbench.debug.viewlet.action.toggleBreakpointsActivatedAction"
  },
  {
    "command": "workbench.debug.viewlet.action.viewMemory"
  },
  {
    "command": "workbench.debug.watchExpressionsView.resetViewLocation"
  },
  {
    "command": "workbench.debug.welcome.focus"
  },
  {
    "command": "workbench.debug.welcome.removeView"
  },
  {
    "command": "workbench.debug.welcome.resetViewLocation"
  },
  {
    "command": "workbench.debug.welcome.toggleVisibility"
  },
  {
    "command": "workbench.editSessions.actions.delete"
  },
  {
    "command": "workbench.editSessions.actions.deleteAll"
  },
  {
    "command": "workbench.editSessions.actions.resetAuth"
  },
  {
    "command": "workbench.editSessions.actions.resume"
  },
  {
    "command": "workbench.editSessions.actions.resumeFromSerializedPayload"
  },
  {
    "command": "workbench.editSessions.actions.resumeLatest"
  },
  {
    "command": "workbench.editSessions.actions.showEditSessions"
  },
  {
    "command": "workbench.editSessions.actions.showOutputChannel"
  },
  {
    "command": "workbench.editSessions.actions.signIn"
  },
  {
    "command": "workbench.editSessions.actions.store"
  },
  {
    "command": "workbench.editSessions.actions.storeCurrent"
  },
  {
    "command": "workbench.explorer.emptyView.removeView"
  },
  {
    "command": "workbench.explorer.emptyView.resetViewLocation"
  },
  {
    "command": "workbench.explorer.emptyView.toggleVisibility"
  },
  {
    "command": "workbench.explorer.fileView.focus"
  },
  {
    "command": "workbench.explorer.openEditorsView.removeView"
  },
  {
    "command": "workbench.explorer.openEditorsView.resetViewLocation"
  },
  {
    "command": "workbench.explorer.openEditorsView.toggleVisibility"
  },
  {
    "command": "workbench.extensions.action.addExtensionToWorkspaceRecommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceFolderRecommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceIgnoredRecommendations"
  },
  {
    "command": "workbench.extensions.action.addToWorkspaceRecommendations"
  },
  {
    "command": "workbench.extensions.action.checkForUpdates"
  },
  {
    "command": "workbench.extensions.action.clearExtensionsSearchResults"
  },
  {
    "command": "workbench.extensions.action.clearLanguage"
  },
  {
    "command": "workbench.extensions.action.configure"
  },
  {
    "command": "workbench.extensions.action.configureKeybindings"
  },
  {
    "command": "workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions"
  },
  {
    "command": "workbench.extensions.action.configureWorkspaceRecommendedExtensions"
  },
  {
    "command": "workbench.extensions.action.copyExtension"
  },
  {
    "command": "workbench.extensions.action.copyExtensionId"
  },
  {
    "command": "workbench.extensions.action.debugExtensionHost"
  },
  {
    "command": "workbench.extensions.action.disableAll"
  },
  {
    "command": "workbench.extensions.action.disableAllWorkspace"
  },
  {
    "command": "workbench.extensions.action.disableAutoUpdate"
  },
  {
    "command": "workbench.extensions.action.enableAll"
  },
  {
    "command": "workbench.extensions.action.enableAllWorkspace"
  },
  {
    "command": "workbench.extensions.action.enableAutoUpdate"
  },
  {
    "command": "workbench.extensions.action.extensionHostProfile"
  },
  {
    "command": "workbench.extensions.action.extensionUpdates"
  },
  {
    "command": "workbench.extensions.action.focusExtensionsView"
  },
  {
    "command": "workbench.extensions.action.ignoreRecommendation"
  },
  {
    "command": "workbench.extensions.action.install.anotherVersion"
  },
  {
    "command": "workbench.extensions.action.install.specificVersion"
  },
  {
    "command": "workbench.extensions.action.installAndDonotSync"
  },
  {
    "command": "workbench.extensions.action.installExtensionFromLocation"
  },
  {
    "command": "workbench.extensions.action.installExtensions"
  },
  {
    "command": "workbench.extensions.action.installPrereleaseAndDonotSync"
  },
  {
    "command": "workbench.extensions.action.installUnsigned"
  },
  {
    "command": "workbench.extensions.action.installVSIX"
  },
  {
    "command": "workbench.extensions.action.installWorkspaceRecommendedExtensions"
  },
  {
    "command": "workbench.extensions.action.listBuiltInExtensions"
  },
  {
    "command": "workbench.extensions.action.listWorkspaceUnsupportedExtensions"
  },
  {
    "command": "workbench.extensions.action.manageAccountPreferences"
  },
  {
    "command": "workbench.extensions.action.manageAuthorizedExtensionURIs"
  },
  {
    "command": "workbench.extensions.action.openExtensionHostProfile"
  },
  {
    "command": "workbench.extensions.action.openExtensionsFolder"
  },
  {
    "command": "workbench.extensions.action.recentlyPublishedExtensions"
  },
  {
    "command": "workbench.extensions.action.refreshExtension"
  },
  {
    "command": "workbench.extensions.action.reinstall"
  },
  {
    "command": "workbench.extensions.action.removeExtensionFromWorkspaceRecommendations"
  },
  {
    "command": "workbench.extensions.action.saveExtensionHostProfile"
  },
  {
    "command": "workbench.extensions.action.setColorTheme"
  },
  {
    "command": "workbench.extensions.action.setFileIconTheme"
  },
  {
    "command": "workbench.extensions.action.setProductIconTheme"
  },
  {
    "command": "workbench.extensions.action.showDisabledExtensions"
  },
  {
    "command": "workbench.extensions.action.showEnabledExtensions"
  },
  {
    "command": "workbench.extensions.action.showExtensionsForLanguage"
  },
  {
    "command": "workbench.extensions.action.showExtensionsWithIds"
  },
  {
    "command": "workbench.extensions.action.showLanguageExtensions"
  },
  {
    "command": "workbench.extensions.action.showPopularExtensions"
  },
  {
    "command": "workbench.extensions.action.showPreReleaseVersion"
  },
  {
    "command": "workbench.extensions.action.showRecommendedExtensions"
  },
  {
    "command": "workbench.extensions.action.showRecommendedKeymapExtensions"
  },
  {
    "command": "workbench.extensions.action.showReleasedVersion"
  },
  {
    "command": "workbench.extensions.action.stopExtensionHostProfile"
  },
  {
    "command": "workbench.extensions.action.switchToPreRlease"
  },
  {
    "command": "workbench.extensions.action.switchToRelease"
  },
  {
    "command": "workbench.extensions.action.toggleApplyToAllProfiles"
  },
  {
    "command": "workbench.extensions.action.toggleAutoUpdateForExtension"
  },
  {
    "command": "workbench.extensions.action.toggleAutoUpdatesForPublisher"
  },
  {
    "command": "workbench.extensions.action.toggleIgnoreExtension"
  },
  {
    "command": "workbench.extensions.action.undoIgnoredRecommendation"
  },
  {
    "command": "workbench.extensions.action.updateAllExtensions"
  },
  {
    "command": "workbench.extensions.command.installFromVSIX"
  },
  {
    "command": "workbench.extensions.installMissingDependencies"
  },
  {
    "command": "workbench.files.action.acceptLocalChanges"
  },
  {
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  {
    "command": "workbench.files.action.compareFileWith"
  },
  {
    "command": "workbench.files.action.compareNewUntitledTextFiles"
  },
  {
    "command": "workbench.files.action.createFileFromExplorer"
  },
  {
    "command": "workbench.files.action.createFolderFromExplorer"
  },
  {
    "command": "workbench.files.action.focusFilesExplorer"
  },
  {
    "command": "workbench.files.action.refreshFilesExplorer"
  },
  {
    "command": "workbench.files.action.revertLocalChanges"
  },
  {
    "command": "workbench.files.action.saveAllInGroup"
  },
  {
    "command": "workbench.files.action.showActiveFileInExplorer"
  },
  {
    "command": "workbench.getCodeExchangeProxyEndpoints"
  },
  {
    "command": "workbench.notebook.layout.configure"
  },
  {
    "command": "workbench.notebook.layout.configure.editorTitle"
  },
  {
    "command": "workbench.notebook.layout.gettingStarted"
  },
  {
    "command": "workbench.notebook.layout.select"
  },
  {
    "command": "workbench.notebook.layout.webview.reset"
  },
  {
    "command": "workbench.output.action.clearOutput"
  },
  {
    "command": "workbench.output.action.switchBetweenOutputs"
  },
  {
    "command": "workbench.output.action.toggleAutoScroll"
  },
  {
    "command": "workbench.panel.chat.view.copilot.focus"
  },
  {
    "command": "workbench.panel.chat.view.copilot.removeView"
  },
  {
    "command": "workbench.panel.chat.view.copilot.resetViewLocation"
  },
  {
    "command": "workbench.panel.chat.view.copilot.toggleVisibility"
  },
  {
    "command": "workbench.panel.chatSidebar"
  },
  {
    "command": "workbench.panel.chatSidebar.resetViewContainerLocation"
  },
  {
    "command": "workbench.panel.comments"
  },
  {
    "command": "workbench.panel.comments.removeView"
  },
  {
    "command": "workbench.panel.comments.resetViewContainerLocation"
  },
  {
    "command": "workbench.panel.comments.resetViewLocation"
  },
  {
    "command": "workbench.panel.comments.toggleVisibility"
  },
  {
    "command": "workbench.panel.markers.resetViewContainerLocation"
  },
  {
    "command": "workbench.panel.markers.view.focus"
  },
  {
    "command": "workbench.panel.markers.view.removeView"
  },
  {
    "command": "workbench.panel.markers.view.resetViewLocation"
  },
  {
    "command": "workbench.panel.markers.view.toggleVisibility"
  },
  {
    "command": "workbench.panel.output.focus"
  },
  {
    "command": "workbench.panel.output.removeView"
  },
  {
    "command": "workbench.panel.output.resetViewContainerLocation"
  },
  {
    "command": "workbench.panel.output.resetViewLocation"
  },
  {
    "command": "workbench.panel.output.toggleVisibility"
  },
  {
    "command": "workbench.panel.repl.resetViewContainerLocation"
  },
  {
    "command": "workbench.panel.repl.view.focus"
  },
  {
    "command": "workbench.panel.repl.view.removeView"
  },
  {
    "command": "workbench.panel.repl.view.resetViewLocation"
  },
  {
    "command": "workbench.panel.repl.view.toggleVisibility"
  },
  {
    "command": "workbench.panel.testResults.resetViewContainerLocation"
  },
  {
    "command": "workbench.panel.testResults.view.focus"
  },
  {
    "command": "workbench.panel.testResults.view.resetViewLocation"
  },
  {
    "command": "workbench.profiles.actions.cleanupProfiles"
  },
  {
    "command": "workbench.profiles.actions.createFromCurrentProfile"
  },
  {
    "command": "workbench.profiles.actions.createProfile"
  },
  {
    "command": "workbench.profiles.actions.createTemporaryProfile"
  },
  {
    "command": "workbench.profiles.actions.deleteProfile"
  },
  {
    "command": "workbench.profiles.actions.exportProfile"
  },
  {
    "command": "workbench.profiles.actions.help"
  },
  {
    "command": "workbench.profiles.actions.manageProfiles"
  },
  {
    "command": "workbench.profiles.actions.newWindowWithProfile"
  },
  {
    "command": "workbench.profiles.actions.resetWorkspaces"
  },
  {
    "command": "workbench.profiles.actions.switchProfile"
  },
  {
    "command": "workbench.remoteTunnel.actions.configure"
  },
  {
    "command": "workbench.remoteTunnel.actions.connecting"
  },
  {
    "command": "workbench.remoteTunnel.actions.copyToClipboard"
  },
  {
    "command": "workbench.remoteTunnel.actions.learnMore"
  },
  {
    "command": "workbench.remoteTunnel.actions.manage"
  },
  {
    "command": "workbench.remoteTunnel.actions.showLog"
  },
  {
    "command": "workbench.remoteTunnel.actions.turnOff"
  },
  {
    "command": "workbench.remoteTunnel.actions.turnOn"
  },
  {
    "command": "workbench.scm.action.collapseAllRepositories"
  },
  {
    "command": "workbench.scm.action.expandAllRepositories"
  },
  {
    "command": "workbench.scm.action.focusNextInput"
  },
  {
    "command": "workbench.scm.action.focusNextResourceGroup"
  },
  {
    "command": "workbench.scm.action.focusPreviousInput"
  },
  {
    "command": "workbench.scm.action.focusPreviousResourceGroup"
  },
  {
    "command": "workbench.scm.action.graph.pickHistoryItemRefs"
  },
  {
    "command": "workbench.scm.action.graph.pickRepository"
  },
  {
    "command": "workbench.scm.action.graph.refresh"
  },
  {
    "command": "workbench.scm.action.graph.revealCurrentHistoryItem"
  },
  {
    "command": "workbench.scm.action.graph.viewChanges"
  },
  {
    "command": "workbench.scm.action.repositories.setSortKey.discoveryTime"
  },
  {
    "command": "workbench.scm.action.repositories.setSortKey.name"
  },
  {
    "command": "workbench.scm.action.repositories.setSortKey.path"
  },
  {
    "command": "workbench.scm.action.setListViewMode"
  },
  {
    "command": "workbench.scm.action.setListViewModeNavigation"
  },
  {
    "command": "workbench.scm.action.setSortKey.name"
  },
  {
    "command": "workbench.scm.action.setSortKey.path"
  },
  {
    "command": "workbench.scm.action.setSortKey.status"
  },
  {
    "command": "workbench.scm.action.setTreeViewMode"
  },
  {
    "command": "workbench.scm.action.setTreeViewModeNavigation"
  },
  {
    "command": "workbench.scm.focus"
  },
  {
    "command": "workbench.scm.history.focus"
  },
  {
    "command": "workbench.scm.history.resetViewLocation"
  },
  {
    "command": "workbench.scm.removeView"
  },
  {
    "command": "workbench.scm.repositories.focus"
  },
  {
    "command": "workbench.scm.repositories.resetViewLocation"
  },
  {
    "command": "workbench.scm.resetViewLocation"
  },
  {
    "command": "workbench.scm.toggleVisibility"
  },
  {
    "command": "workbench.trust.configure"
  },
  {
    "command": "workbench.trust.manage"
  },
  {
    "command": "workbench.userData.actions.cancelTurnOn"
  },
  {
    "command": "workbench.userData.actions.openSyncBackupsFolder"
  },
  {
    "command": "workbench.userData.actions.signin"
  },
  {
    "command": "workbench.userData.actions.turningOn"
  },
  {
    "command": "workbench.userDataSync.actions.acceptMerges"
  },
  {
    "command": "workbench.userDataSync.actions.configure"
  },
  {
    "command": "workbench.userDataSync.actions.downloadSyncActivity"
  },
  {
    "command": "workbench.userDataSync.actions.help"
  },
  {
    "command": "workbench.userDataSync.actions.manage"
  },
  {
    "command": "workbench.userDataSync.actions.settings"
  },
  {
    "command": "workbench.userDataSync.actions.showConflicts"
  },
  {
    "command": "workbench.userDataSync.actions.showLog"
  },
  {
    "command": "workbench.userDataSync.actions.showSyncedData"
  },
  {
    "command": "workbench.userDataSync.actions.syncNow"
  },
  {
    "command": "workbench.userDataSync.actions.turnOff"
  },
  {
    "command": "workbench.userDataSync.actions.turnOn"
  },
  {
    "command": "workbench.view.debug.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.editSessions.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.explorer.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.extension.copilot-chat"
  },
  {
    "command": "workbench.view.extension.copilot-chat.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.extension.dockerView"
  },
  {
    "command": "workbench.view.extension.dockerView.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.extension.references-view"
  },
  {
    "command": "workbench.view.extension.references-view.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.extension.test"
  },
  {
    "command": "workbench.view.extension.test.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.extension.vscode-edge-devtools-view"
  },
  {
    "command": "workbench.view.extension.vscode-edge-devtools-view.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.extensions.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.remote"
  },
  {
    "command": "workbench.view.remote.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.scm.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.search.focus"
  },
  {
    "command": "workbench.view.search.removeView"
  },
  {
    "command": "workbench.view.search.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.search.resetViewLocation"
  },
  {
    "command": "workbench.view.search.toggleVisibility"
  },
  {
    "command": "workbench.view.sync"
  },
  {
    "command": "workbench.view.sync.resetViewContainerLocation"
  },
  {
    "command": "workbench.view.testCoverage.focus"
  },
  {
    "command": "workbench.view.testCoverage.resetViewLocation"
  },
  {
    "command": "workbench.view.testing.focus"
  },
  {
    "command": "workbench.view.testing.resetViewLocation"
  },
  {
    "command": "workbench.views.editSessions.data.focus"
  },
  {
    "command": "workbench.views.editSessions.data.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.builtinFeatureExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.builtinFeatureExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.builtinProgrammingLanguageExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.builtinThemeExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.builtinThemeExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.deprecatedExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.deprecatedExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.disabled.focus"
  },
  {
    "command": "workbench.views.extensions.disabled.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.enabled.focus"
  },
  {
    "command": "workbench.views.extensions.enabled.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.installed.focus"
  },
  {
    "command": "workbench.views.extensions.installed.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.marketplace.focus"
  },
  {
    "command": "workbench.views.extensions.marketplace.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.otherRecommendations.focus"
  },
  {
    "command": "workbench.views.extensions.otherRecommendations.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.popular.focus"
  },
  {
    "command": "workbench.views.extensions.popular.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchBuiltin.focus"
  },
  {
    "command": "workbench.views.extensions.searchBuiltin.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchDisabled.focus"
  },
  {
    "command": "workbench.views.extensions.searchDisabled.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchEnabled.focus"
  },
  {
    "command": "workbench.views.extensions.searchEnabled.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchInstalled.focus"
  },
  {
    "command": "workbench.views.extensions.searchInstalled.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchOutdated.focus"
  },
  {
    "command": "workbench.views.extensions.searchOutdated.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchRecentlyUpdated.focus"
  },
  {
    "command": "workbench.views.extensions.searchRecentlyUpdated.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.searchWorkspaceUnsupported.focus"
  },
  {
    "command": "workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.untrustedPartiallySupportedExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.untrustedUnsupportedExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.virtualPartiallySupportedExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.virtualUnsupportedExtensions.focus"
  },
  {
    "command": "workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation"
  },
  {
    "command": "workbench.views.extensions.workspaceRecommendations.focus"
  },
  {
    "command": "workbench.views.extensions.workspaceRecommendations.resetViewLocation"
  },
  {
    "command": "workbench.views.sync.conflicts.focus"
  },
  {
    "command": "workbench.views.sync.conflicts.resetViewLocation"
  },
  {
    "command": "workbench.views.sync.externalActivity.focus"
  },
  {
    "command": "workbench.views.sync.externalActivity.resetViewLocation"
  },
  {
    "command": "workbench.views.sync.localActivity.focus"
  },
  {
    "command": "workbench.views.sync.localActivity.resetViewLocation"
  },
  {
    "command": "workbench.views.sync.machines.focus"
  },
  {
    "command": "workbench.views.sync.machines.resetViewLocation"
  },
  {
    "command": "workbench.views.sync.remoteActivity.focus"
  },
  {
    "command": "workbench.views.sync.remoteActivity.resetViewLocation"
  },
  {
    "command": "workbench.views.sync.troubleshoot.focus"
  },
  {
    "command": "workbench.views.sync.troubleshoot.resetViewLocation"
  },
  {
    "command": "~remote.forwardedPorts.focus"
  },
  {
    "command": "~remote.forwardedPorts.removeView"
  },
  {
    "command": "~remote.forwardedPorts.resetViewLocation"
  },
  {
    "command": "~remote.forwardedPorts.toggleVisibility"
  },
  {
    "command": "~remote.forwardedPortsContainer"
  },
  {
    "command": "~remote.forwardedPortsContainer.resetViewContainerLocation"
  },
  {
    "key": "escape escape",
    "command": "workbench.action.exitZenMode",
    "when": "inZenMode"
  },
  {
    "key": "shift+escape",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "inReferenceSearchEditor && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "editor.closeTestPeek",
    "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
  },
  {
    "key": "shift+escape",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "key": "escape",
    "command": "cancelSelection",
    "when": "editorHasSelection && textInputFocus"
  },
  {
    "key": "ctrl+end",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+end",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+down",
    "command": "cursorColumnSelectDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "cursorColumnSelectLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+pagedown",
    "command": "cursorColumnSelectPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+pageup",
    "command": "cursorColumnSelectPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "cursorColumnSelectRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+up",
    "command": "cursorColumnSelectUp",
    "when": "textInputFocus"
  },
  {
    "key": "down",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+down",
    "command": "cursorDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+down",
    "command": "cursorDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "end",
    "command": "cursorEnd",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "shift+end",
    "command": "cursorEndSelect",
    "when": "textInputFocus",
    "args": {
      "sticky": false
    }
  },
  {
    "key": "home",
    "command": "cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "shift+home",
    "command": "cursorHomeSelect",
    "when": "textInputFocus"
  },
  {
    "key": "left",
    "command": "cursorLeft",
    "when": "textInputFocus"
  },
  {
    "key": "shift+left",
    "command": "cursorLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "pagedown",
    "command": "cursorPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "shift+pagedown",
    "command": "cursorPageDownSelect",
    "when": "textInputFocus"
  },
  {
    "key": "pageup",
    "command": "cursorPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "shift+pageup",
    "command": "cursorPageUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "right",
    "command": "cursorRight",
    "when": "textInputFocus"
  },
  {
    "key": "shift+right",
    "command": "cursorRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+home",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+home",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  {
    "key": "up",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+up",
    "command": "cursorUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+up",
    "command": "cursorUpSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+backspace",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  {
    "key": "backspace",
    "command": "deleteLeft",
    "when": "textInputFocus"
  },
  {
    "key": "delete",
    "command": "deleteRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+a",
    "command": "editor.action.selectAll"
  },
  {
    "key": "ctrl+l",
    "command": "expandLineSelection",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+down",
    "command": "inlineChat.arrowOutDown",
    "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorLast && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
  },
  {
    "key": "ctrl+up",
    "command": "inlineChat.arrowOutUp",
    "when": "inlineChatFocused && inlineChatHasProvider && inlineChatInnerCursorFirst && !accessibilityModeEnabled && !isEmbeddedDiffEditor"
  },
  {
    "key": "shift+tab",
    "command": "outdent",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "ctrl+shift+z",
    "command": "redo"
  },
  {
    "key": "ctrl+y",
    "command": "redo"
  },
  {
    "key": "ctrl+down",
    "command": "scrollLineDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+up",
    "command": "scrollLineUp",
    "when": "textInputFocus"
  },
  {
    "key": "alt+pagedown",
    "command": "scrollPageDown",
    "when": "textInputFocus"
  },
  {
    "key": "alt+pageup",
    "command": "scrollPageUp",
    "when": "textInputFocus"
  },
  {
    "key": "tab",
    "command": "tab",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "ctrl+z",
    "command": "undo"
  },
  {
    "key": "shift+down",
    "command": "cursorColumnSelectDown",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+left",
    "command": "cursorColumnSelectLeft",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+pagedown",
    "command": "cursorColumnSelectPageDown",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+pageup",
    "command": "cursorColumnSelectPageUp",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+right",
    "command": "cursorColumnSelectRight",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+up",
    "command": "cursorColumnSelectUp",
    "when": "editorColumnSelection && textInputFocus"
  },
  {
    "key": "shift+escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "escape",
    "command": "removeSecondaryCursors",
    "when": "editorHasMultipleSelections && textInputFocus"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.cell.chat.arrowOutDown",
    "when": "inlineChatFocused && inlineChatInnerCursorLast && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+up",
    "command": "notebook.cell.chat.arrowOutUp",
    "when": "inlineChatFocused && inlineChatInnerCursorFirst && notebookCellChatFocused && !accessibilityModeEnabled && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+up",
    "command": "notebook.cell.focusChatWidget",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.cell.focusNextChatWidget",
    "when": "editorTextFocus && inputFocus && isCompositeNotebook && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top' || editorTextFocus && inputFocus && notebookCellEditorFocused && !accessibilityModeEnabled && !isCompositeNotebook && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "key": "ctrl+down",
    "command": "inlineChat.focus",
    "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'above'"
  },
  {
    "key": "ctrl+up",
    "command": "inlineChat.focus",
    "when": "editorTextFocus && inlineChatVisible && !accessibilityModeEnabled && !inlineChatFocused && !isEmbeddedDiffEditor && inlineChatOuterCursorPosition == 'below'"
  },
  {
    "key": "escape",
    "command": "notebook.cell.chat.acceptChanges",
    "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused"
  },
  {
    "key": "down",
    "command": "notebook.cell.chat.nextFromHistory",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "key": "up",
    "command": "notebook.cell.chat.previousFromHistory",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "key": "f12",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "f4",
    "command": "goToNextReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+f12",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "shift+f4",
    "command": "goToPreviousReference",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "refactorPreview.apply",
    "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
  },
  {
    "key": "alt+enter",
    "command": "testing.editFocusedTest",
    "when": "focusedView == 'workbench.view.testing'"
  },
  {
    "key": "escape",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "notebook.cell.quitEdit",
    "when": "inputFocus && notebookEditorFocused && !inlineChatFocused && notebookCellType == 'markup'"
  },
  {
    "key": "escape",
    "command": "inlineChat.discard",
    "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatUserDidEdit"
  },
  {
    "key": "ctrl+f",
    "command": "actions.find",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "enter",
    "command": "breakpointWidget.action.acceptInput",
    "when": "breakpointWidgetVisible && inBreakpointWidget"
  },
  {
    "key": "ctrl+up",
    "command": "chat.action.focus",
    "when": "chatCursorAtTop && inChatInput && !quickChatHasFocus"
  },
  {
    "key": "ctrl+up",
    "command": "chat.action.focus",
    "when": "inChatInput && isLinux && !quickChatHasFocus || inChatInput && isWindows && !quickChatHasFocus"
  },
  {
    "key": "shift+escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "closeBreakpointWidget",
    "when": "breakpointWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+u",
    "command": "cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+right",
    "command": "cursorWordEndRight",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+shift+right",
    "command": "cursorWordEndRightSelect",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+left",
    "command": "cursorWordLeft",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+shift+left",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+delete",
    "command": "deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "f7",
    "command": "editor.action.accessibleDiffViewer.next",
    "when": "isInDiffEditor"
  },
  {
    "key": "shift+f7",
    "command": "editor.action.accessibleDiffViewer.prev",
    "when": "isInDiffEditor"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "editor.action.addCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+.",
    "command": "editor.action.autoFix",
    "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
  },
  {
    "key": "shift+alt+a",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "escape",
    "command": "editor.action.cancelSelectionAnchor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "ctrl+f2",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+insert",
    "command": "editor.action.clipboardCopyAction"
  },
  {
    "key": "ctrl+c",
    "command": "editor.action.clipboardCopyAction"
  },
  {
    "key": "shift+delete",
    "command": "editor.action.clipboardCutAction"
  },
  {
    "key": "ctrl+x",
    "command": "editor.action.clipboardCutAction"
  },
  {
    "key": "shift+insert",
    "command": "editor.action.clipboardPasteAction"
  },
  {
    "key": "ctrl+v",
    "command": "editor.action.clipboardPasteAction"
  },
  {
    "key": "ctrl+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+down",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+up",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+k",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+f3",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+alt+f3",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "enter",
    "command": "editor.action.extensioneditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.extensioneditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.extensioneditor.showfind",
    "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "shift+alt+f",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
  },
  {
    "key": "shift+alt+f",
    "command": "editor.action.formatDocument.none",
    "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+f",
    "command": "editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+down",
    "command": "editor.action.goToBottomHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "end",
    "command": "editor.action.goToBottomHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "enter",
    "command": "editor.action.goToFocusedStickyScrollLine",
    "when": "stickyScrollFocused"
  },
  {
    "key": "ctrl+f12",
    "command": "editor.action.goToImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus"
  },
  {
    "key": "shift+f12",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+up",
    "command": "editor.action.goToTopHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "home",
    "command": "editor.action.goToTopHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "escape",
    "command": "editor.action.hideColorPicker",
    "when": "standaloneColorPickerVisible"
  },
  {
    "key": "ctrl+shift+.",
    "command": "editor.action.inPlaceReplace.down",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+,",
    "command": "editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "escape",
    "command": "editor.action.inlineEdit.reject",
    "when": "inlineEditVisible && !editorReadonly"
  },
  {
    "key": "escape",
    "command": "editor.action.inlineSuggest.hide",
    "when": "inlineEditIsVisible || inlineSuggestionVisible"
  },
  {
    "key": "alt+]",
    "command": "editor.action.inlineSuggest.showNext",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "alt+[",
    "command": "editor.action.inlineSuggest.showPrevious",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "enter",
    "command": "editor.action.insertColorWithStandaloneColorPicker",
    "when": "standaloneColorPickerFocused"
  },
  {
    "key": "ctrl+alt+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+i",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+alt+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+f2",
    "command": "editor.action.linkedEditing",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+f8",
    "command": "editor.action.marker.next",
    "when": "editorFocus"
  },
  {
    "key": "f8",
    "command": "editor.action.marker.nextInFiles",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+f8",
    "command": "editor.action.marker.prev",
    "when": "editorFocus"
  },
  {
    "key": "shift+f8",
    "command": "editor.action.marker.prevInFiles",
    "when": "editorFocus"
  },
  {
    "key": "alt+down",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+d",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "alt+f9",
    "command": "editor.action.nextCommentThreadAction"
  },
  {
    "key": "alt+f10",
    "command": "editor.action.nextCommentedRangeAction",
    "when": "activeEditorHasCommentingRange"
  },
  {
    "key": "ctrl+k ctrl+alt+down",
    "command": "editor.action.nextCommentingRange",
    "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
  },
  {
    "key": "f3",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "enter",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+f3",
    "command": "editor.action.nextSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+alt+o",
    "command": "editor.action.organizeImports",
    "when": "textInputFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
  },
  {
    "key": "ctrl+[",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+down",
    "command": "editor.action.pageDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "pagedown",
    "command": "editor.action.pageDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "alt+up",
    "command": "editor.action.pageUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "pageup",
    "command": "editor.action.pageUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "alt+f12",
    "command": "editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+shift+f12",
    "command": "editor.action.peekImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "shift+alt+f9",
    "command": "editor.action.previousCommentThreadAction"
  },
  {
    "key": "shift+alt+f10",
    "command": "editor.action.previousCommentedRangeAction",
    "when": "activeEditorHasCommentingRange"
  },
  {
    "key": "ctrl+k ctrl+alt+up",
    "command": "editor.action.previousCommentingRange",
    "when": "accessibilityModeEnabled && commentFocused || accessibilityModeEnabled && editorFocus || accessibilityHelpIsShown && accessibilityModeEnabled && accessibleViewCurrentProviderId == 'comments'"
  },
  {
    "key": "shift+f3",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus && findInputFocussed"
  },
  {
    "key": "ctrl+shift+f3",
    "command": "editor.action.previousSelectionMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+.",
    "command": "editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+shift+r",
    "command": "editor.action.refactor",
    "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+backspace",
    "command": "editor.action.removeBrackets",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+u",
    "command": "editor.action.removeCommentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "f2",
    "command": "editor.action.rename",
    "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "f12",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus"
  },
  {
    "key": "ctrl+f12",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb"
  },
  {
    "key": "ctrl+k f12",
    "command": "editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+k ctrl+f12",
    "command": "editor.action.revealDefinitionAside",
    "when": "editorHasDefinitionProvider && editorTextFocus && isWeb && !isInEmbeddedEditor"
  },
  {
    "key": "down",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "left",
    "command": "editor.action.scrollLeftHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "right",
    "command": "editor.action.scrollRightHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "up",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "escape",
    "command": "editor.action.selectEditor",
    "when": "stickyScrollFocused"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "editor.action.selectFromAnchorToCursor",
    "when": "editorTextFocus && selectionAnchorSet"
  },
  {
    "key": "ctrl+shift+l",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  {
    "key": "down",
    "command": "editor.action.selectNextStickyScrollLine",
    "when": "stickyScrollFocused"
  },
  {
    "key": "up",
    "command": "editor.action.selectPreviousStickyScrollLine",
    "when": "stickyScrollFocused"
  },
  {
    "key": "ctrl+k ctrl+b",
    "command": "editor.action.setSelectionAnchor",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+f10",
    "command": "editor.action.showContextMenu",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+right",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+h",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.submitComment",
    "when": "commentEditorFocused"
  },
  {
    "key": "ctrl+m",
    "command": "editor.action.toggleTabFocusMode"
  },
  {
    "key": "alt+z",
    "command": "editor.action.toggleWordWrap"
  },
  {
    "key": "ctrl+shift+space",
    "command": "editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  {
    "key": "ctrl+i",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "enter",
    "command": "editor.action.webvieweditor.findNext",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "shift+enter",
    "command": "editor.action.webvieweditor.findPrevious",
    "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "escape",
    "command": "editor.action.webvieweditor.hideFind",
    "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.webvieweditor.showFind",
    "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "f7",
    "command": "editor.action.wordHighlight.next",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "key": "shift+f7",
    "command": "editor.action.wordHighlight.prev",
    "when": "editorTextFocus && hasWordHighlights"
  },
  {
    "key": "escape",
    "command": "editor.cancelOperation",
    "when": "cancellableOperation"
  },
  {
    "key": "ctrl+.",
    "command": "editor.changeDropType",
    "when": "dropWidgetVisible"
  },
  {
    "key": "ctrl+.",
    "command": "editor.changePasteType",
    "when": "pasteWidgetVisible"
  },
  {
    "key": "ctrl+k ctrl+,",
    "command": "editor.createFoldingRangeFromSelection",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "escape",
    "command": "editor.debug.action.closeExceptionWidget",
    "when": "exceptionWidgetVisible"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },
  {
    "key": "f9",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"
  },
  {
    "key": "tab",
    "command": "editor.emmet.action.expandAbbreviation",
    "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },
  {
    "key": "ctrl+shift+[",
    "command": "editor.fold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+0",
    "command": "editor.foldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+/",
    "command": "editor.foldAllBlockComments",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+-",
    "command": "editor.foldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+8",
    "command": "editor.foldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+1",
    "command": "editor.foldLevel1",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+2",
    "command": "editor.foldLevel2",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+3",
    "command": "editor.foldLevel3",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+4",
    "command": "editor.foldLevel4",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+5",
    "command": "editor.foldLevel5",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+6",
    "command": "editor.foldLevel6",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+7",
    "command": "editor.foldLevel7",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+[",
    "command": "editor.foldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "f12",
    "command": "editor.gotoNextSymbolFromResult",
    "when": "hasSymbols"
  },
  {
    "key": "escape",
    "command": "editor.gotoNextSymbolFromResult.cancel",
    "when": "hasSymbols"
  },
  {
    "key": "escape",
    "command": "editor.hideDropWidget",
    "when": "dropWidgetVisible"
  },
  {
    "key": "escape",
    "command": "editor.hidePasteWidget",
    "when": "pasteWidgetVisible"
  },
  {
    "key": "ctrl+k ctrl+.",
    "command": "editor.removeManualFoldingRanges",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+l",
    "command": "editor.toggleFold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+shift+l",
    "command": "editor.toggleFoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+shift+]",
    "command": "editor.unfold",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+j",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+=",
    "command": "editor.unfoldAllExcept",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+9",
    "command": "editor.unfoldAllMarkerRegions",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "ctrl+k ctrl+]",
    "command": "editor.unfoldRecursively",
    "when": "editorTextFocus && foldingEnabled"
  },
  {
    "key": "escape",
    "command": "inlayHints.stopReadingLineWithHint",
    "when": "isReadingLineWithInlayHints"
  },
  {
    "key": "tab",
    "command": "insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "key": "ctrl+enter",
    "command": "interactive.execute",
    "when": "activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "shift+enter",
    "command": "interactive.execute",
    "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "enter",
    "command": "interactive.execute",
    "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "escape",
    "command": "notebook.cell.chat.discard",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
  },
  {
    "key": "pagedown",
    "command": "notebook.cell.cursorPageDown",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "shift+pagedown",
    "command": "notebook.cell.cursorPageDownSelect",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
  },
  {
    "key": "pageup",
    "command": "notebook.cell.cursorPageUp",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "shift+pageup",
    "command": "notebook.cell.cursorPageUpSelect",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputFocused"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "notebook.cell.execute",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelCount > 0 || !notebookCellExecuting && notebookCellType == 'code' && notebookCellListFocused || inlineChatFocused && notebookCellChatFocused && notebookKernelSourceCount > 0 || inlineChatFocused && notebookCellChatFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code'"
  },
  {
    "key": "alt+enter",
    "command": "notebook.cell.executeAndInsertBelow",
    "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "key": "shift+enter",
    "command": "notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && !inlineChatFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !inlineChatFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "key": "ctrl+shift+v",
    "command": "notebook.cell.pasteAbove",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "down",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
  },
  {
    "key": "up",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
  },
  {
    "key": "shift+alt+f",
    "command": "notebook.formatCell",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+enter",
    "command": "openReferenceToSide",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "key": "enter",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "ctrl+f",
    "command": "repl.action.filter",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "ctrl+alt+f",
    "command": "repl.action.find",
    "when": "inDebugRepl || inDebugRepl && focusedView == 'workbench.panel.repl.view'"
  },
  {
    "key": "ctrl+enter",
    "command": "repl.execute",
    "when": "activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "shift+enter",
    "command": "repl.execute",
    "when": "config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "enter",
    "command": "repl.execute",
    "when": "!config.interactiveWindow.executeWithShiftEnter && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "ctrl+shift+r",
    "command": "rerunSearchEditorSearch",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "search.action.focusQueryEditorWidget",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+shift+backspace",
    "command": "search.searchEditor.action.deleteFileResults",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "settings.action.clearSearchResults",
    "when": "inSettingsEditor && inSettingsSearch"
  },
  {
    "key": "down",
    "command": "settings.action.focusSettingsFile",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+f",
    "command": "settings.action.search",
    "when": "inSettingsEditor"
  },
  {
    "key": "ctrl+/",
    "command": "toggleExplainMode",
    "when": "suggestWidgetVisible"
  },
  {
    "key": "ctrl+k f2",
    "command": "togglePeekWidgetFocus",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    "key": "escape",
    "command": "welcome.goBack",
    "when": "inWelcome && activeEditor == 'gettingStartedPage'"
  },
  {
    "key": "ctrl+k ctrl+alt+c",
    "command": "workbench.action.addComment"
  },
  {
    "key": "ctrl+/",
    "command": "workbench.action.chat.attachContext",
    "when": "inChatInput && chatLocation == 'panel' || config.chat.experimental.variables.editor && inChatInput && chatLocation == 'editor' || config.chat.experimental.variables.notebook && inChatInput && chatLocation == 'notebook' || config.chat.experimental.variables.terminal && inChatInput && chatLocation == 'terminal'"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "workbench.action.chat.runInTerminal",
    "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat"
  },
  {
    "key": "enter",
    "command": "workbench.action.chat.submit",
    "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.chat.submitSecondaryAgent",
    "when": "chatInputHasText && inChatInput && !chatInputHasAgent && !chatSessionRequestInProgress"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.editor.nextChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+alt+f5",
    "command": "workbench.action.editor.previousChange",
    "when": "editorTextFocus && !textCompareEditorActive"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
  {
    "key": "escape",
    "command": "workbench.action.hideComment",
    "when": "commentEditorFocused"
  },
  {
    "key": "tab",
    "command": "editor.action.inlineEdit.accept",
    "when": "cursorAtInlineEdit && inlineEditVisible && !editorReadonly"
  },
  {
    "key": "ctrl+alt+=",
    "command": "editor.action.inlineEdit.jumpTo",
    "when": "inlineEditVisible && !cursorAtInlineEdit && !editorReadonly"
  },
  {
    "key": "ctrl+alt+=",
    "command": "editor.action.inlineEdit.trigger",
    "when": "!editorReadonly && !inlineEditVisible"
  },
  {
    "key": "ctrl+right",
    "command": "editor.action.inlineSuggest.acceptNextWord",
    "when": "inlineSuggestionVisible && !editorReadonly"
  },
  {
    "key": "alt+f8",
    "command": "testing.goToNextMessage",
    "when": "editorFocus && testing.isPeekVisible"
  },
  {
    "key": "shift+alt+f8",
    "command": "testing.goToPreviousMessage",
    "when": "editorFocus && testing.isPeekVisible"
  },
  {
    "key": "shift+escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "escape",
    "command": "closeFindWidget",
    "when": "editorFocus && findWidgetVisible && !isComposing"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "enter",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
  },
  {
    "key": "alt+enter",
    "command": "editor.action.selectAllMatches",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "alt+c",
    "command": "toggleFindCaseSensitive",
    "when": "editorFocus"
  },
  {
    "key": "alt+l",
    "command": "toggleFindInSelection",
    "when": "editorFocus"
  },
  {
    "key": "alt+r",
    "command": "toggleFindRegex",
    "when": "editorFocus"
  },
  {
    "key": "alt+w",
    "command": "toggleFindWholeWord",
    "when": "editorFocus"
  },
  {
    "key": "alt+p",
    "command": "togglePreserveCase",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+=",
    "command": "editor.action.inlineEdit.jumpBack",
    "when": "cursorAtInlineEdit && !editorReadonly"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.chat.acceptChanges",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
  },
  {
    "key": "tab",
    "command": "jumpToNextSnippetPlaceholder",
    "when": "hasNextTabstop && inSnippetMode && textInputFocus"
  },
  {
    "key": "shift+tab",
    "command": "jumpToPrevSnippetPlaceholder",
    "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
  },
  {
    "key": "escape",
    "command": "leaveEditorMessage",
    "when": "messageVisible"
  },
  {
    "key": "shift+escape",
    "command": "leaveSnippet",
    "when": "inSnippetMode && textInputFocus"
  },
  {
    "key": "escape",
    "command": "leaveSnippet",
    "when": "inSnippetMode && textInputFocus"
  },
  {
    "key": "shift+escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "escape",
    "command": "closeDirtyDiff",
    "when": "dirtyDiffVisible"
  },
  {
    "key": "shift+escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationToastsVisible"
  },
  {
    "key": "shift+escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "escape",
    "command": "closeParameterHints",
    "when": "editorFocus && parameterHintsVisible"
  },
  {
    "key": "alt+down",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "down",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "alt+up",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "up",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "shift+tab",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+enter",
    "command": "acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "enter",
    "command": "acceptSelectedSuggestion",
    "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
  },
  {
    "key": "ctrl+i",
    "command": "focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+space",
    "command": "focusSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "shift+escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "escape",
    "command": "hideSuggestWidget",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "tab",
    "command": "insertBestCompletion",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "tab",
    "command": "insertNextSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "shift+tab",
    "command": "insertPrevSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  {
    "key": "ctrl+pagedown",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "pagedown",
    "command": "selectNextPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "down",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "pageup",
    "command": "selectPrevPageSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "up",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+i",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+space",
    "command": "toggleSuggestionDetails",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+alt+space",
    "command": "toggleSuggestionFocus",
    "when": "suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "enter",
    "command": "acceptRenameInput",
    "when": "editorFocus && renameInputVisible && !isComposing"
  },
  {
    "key": "ctrl+enter",
    "command": "acceptRenameInputWithPreview",
    "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible && !isComposing"
  },
  {
    "key": "shift+escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "escape",
    "command": "cancelLinkedEditingInput",
    "when": "LinkedEditingInputVisible && editorTextFocus"
  },
  {
    "key": "shift+escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "escape",
    "command": "cancelRenameInput",
    "when": "editorFocus && renameInputVisible"
  },
  {
    "key": "down",
    "command": "focusNextRenameSuggestion",
    "when": "renameInputVisible"
  },
  {
    "key": "up",
    "command": "focusPreviousRenameSuggestion",
    "when": "renameInputVisible"
  },
  {
    "key": "ctrl+shift+l",
    "command": "addCursorsAtSearchResults",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+;",
    "command": "breadcrumbs.focus",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "key": "ctrl+shift+.",
    "command": "breadcrumbs.focusAndSelect",
    "when": "breadcrumbsPossible && breadcrumbsVisible"
  },
  {
    "key": "ctrl+right",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "right",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+left",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "left",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "space",
    "command": "breadcrumbs.revealFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "breadcrumbs.revealFocusedFromTreeAside",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "down",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "enter",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+shift+.",
    "command": "breadcrumbs.toggleToOn",
    "when": "!config.breadcrumbs.enabled"
  },
  {
    "key": "ctrl+down",
    "command": "chat.action.focus",
    "when": "inChat && inChatInput && quickChatHasFocus"
  },
  {
    "key": "escape",
    "command": "closeReplaceInFilesWidget",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "escape",
    "command": "commentsClearFilterText",
    "when": "commentsFilterFocus"
  },
  {
    "key": "ctrl+f",
    "command": "commentsFocusFilter",
    "when": "focusedView == 'workbench.panel.comments'"
  },
  {
    "key": "ctrl+down",
    "command": "commentsFocusViewFromFilter",
    "when": "commentsFilterFocus"
  },
  {
    "key": "shift+alt+c",
    "command": "copyFilePath",
    "when": "!editorFocus"
  },
  {
    "key": "shift+alt+c",
    "command": "copyFilePath",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+k ctrl+shift+c",
    "command": "copyRelativeFilePath",
    "when": "!editorFocus"
  },
  {
    "key": "ctrl+k ctrl+shift+c",
    "command": "copyRelativeFilePath",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+left",
    "command": "cursorWordAccessibilityLeft",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "key": "ctrl+shift+left",
    "command": "cursorWordAccessibilityLeftSelect",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "key": "ctrl+right",
    "command": "cursorWordAccessibilityRight",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "key": "ctrl+shift+right",
    "command": "cursorWordAccessibilityRightSelect",
    "when": "accessibilityModeEnabled && isWindows && textInputFocus && focusedView == 'workbench.panel.output'"
  },
  {
    "key": "alt+enter",
    "command": "debug.openBreakpointToSide",
    "when": "breakpointsFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "debug.openBreakpointToSide",
    "when": "breakpointsFocused"
  },
  {
    "key": "ctrl+f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "f5",
    "command": "debug.openView",
    "when": "!debuggersAvailable"
  },
  {
    "key": "delete",
    "command": "debug.removeBreakpoint",
    "when": "breakpointsFocused && !breakpointInputFocused"
  },
  {
    "key": "delete",
    "command": "debug.removeWatchExpression",
    "when": "watchExpressionsFocused && !expressionSelected"
  },
  {
    "key": "alt+-",
    "command": "decreaseSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "alt+f1",
    "command": "editor.action.accessibilityHelp",
    "when": "!accessibilityHelpIsShown"
  },
  {
    "key": "alt+a",
    "command": "editor.action.accessibilityHelpConfigureAssignedKeybindings",
    "when": "accessibilityHelpIsShown && accessibleViewHasAssignedKeybindings"
  },
  {
    "key": "alt+k",
    "command": "editor.action.accessibilityHelpConfigureKeybindings",
    "when": "accessibilityHelpIsShown && accessibleViewHasUnassignedKeybindings"
  },
  {
    "key": "alt+h",
    "command": "editor.action.accessibilityHelpOpenHelpLink",
    "when": "accessibilityHelpIsShown"
  },
  {
    "key": "alt+f2",
    "command": "editor.action.accessibleView"
  },
  {
    "key": "ctrl+/",
    "command": "editor.action.accessibleViewAcceptInlineCompletion",
    "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'inlineCompletions'"
  },
  {
    "key": "alt+f6",
    "command": "editor.action.accessibleViewDisableHint",
    "when": "accessibilityHelpIsShown && accessibleViewVerbosityEnabled || accessibleViewIsShown && accessibleViewVerbosityEnabled"
  },
  {
    "key": "alt+]",
    "command": "editor.action.accessibleViewNext",
    "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
  },
  {
    "key": "ctrl+alt+pagedown",
    "command": "editor.action.accessibleViewNextCodeBlock",
    "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'"
  },
  {
    "key": "alt+[",
    "command": "editor.action.accessibleViewPrevious",
    "when": "accessibleViewIsShown && accessibleViewSupportsNavigation"
  },
  {
    "key": "ctrl+alt+pageup",
    "command": "editor.action.accessibleViewPreviousCodeBlock",
    "when": "accessibleViewContainsCodeBlocks && accessibleViewCurrentProviderId == 'panelChat'"
  },
  {
    "key": "ctrl+k ctrl+k",
    "command": "editor.action.defineKeybinding"
  },
  {
    "key": "tab",
    "command": "editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || cursorAtInlineEdit && inlineEditIsVisible && !editor.hasSelection && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || cursorAtInlineEdit && inlineEditIsVisible && inlineSuggestionVisible && !editor.hasSelection && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "key": "shift+f9",
    "command": "editor.debug.action.toggleInlineBreakpoint",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+alt+d",
    "command": "editor.detectLanguage",
    "when": "editorTextFocus && !notebookEditable"
  },
  {
    "key": "shift+enter",
    "command": "editor.refocusCallHierarchy",
    "when": "callHierarchyVisible"
  },
  {
    "key": "shift+enter",
    "command": "editor.refocusTypeHierarchy",
    "when": "typeHierarchyVisible"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showIncomingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showOutgoingCalls",
    "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showSubtypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
  },
  {
    "key": "shift+alt+h",
    "command": "editor.showSupertypes",
    "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
  },
  {
    "key": "ctrl+enter",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "shift+alt+f",
    "command": "filesExplorer.findInFolder",
    "when": "explorerResourceIsFolder && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "alt+down",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "key": "down",
    "command": "history.showNext",
    "when": "historyNavigationForwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "key": "alt+up",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "key": "up",
    "command": "history.showPrevious",
    "when": "historyNavigationBackwardsEnabled && historyNavigationWidgetFocus && !isComposing && !suggestWidgetVisible"
  },
  {
    "key": "down",
    "command": "iconSelectBox.focusDown",
    "when": "iconSelectBoxFocus"
  },
  {
    "key": "right",
    "command": "iconSelectBox.focusNext",
    "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
  },
  {
    "key": "left",
    "command": "iconSelectBox.focusPrevious",
    "when": "iconSelectBoxFocus && iconSelectBoxInputEmpty || iconSelectBoxFocus && !iconSelectBoxInputFocus"
  },
  {
    "key": "up",
    "command": "iconSelectBox.focusUp",
    "when": "iconSelectBoxFocus"
  },
  {
    "key": "enter",
    "command": "iconSelectBox.selectFocused",
    "when": "iconSelectBoxFocus"
  },
  {
    "key": "alt+=",
    "command": "increaseSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "inlineChat.close",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "escape",
    "command": "inlineChat.discardHunkChange",
    "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'"
  },
  {
    "key": "ctrl+i",
    "command": "inlineChat.holdForSpeech",
    "when": "hasSpeechProvider && inlineChatHasProvider && inlineChatVisible && textInputFocus"
  },
  {
    "key": "f7",
    "command": "inlineChat.moveToNextHunk",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "shift+f7",
    "command": "inlineChat.moveToPreviousHunk",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+r",
    "command": "inlineChat.regenerate",
    "when": "inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+k i",
    "command": "inlineChat.start",
    "when": "editorFocus && inlineChatHasProvider && inlineChatPossible && !editorReadonly"
  },
  {
    "key": "ctrl+i",
    "command": "inlineChat.start",
    "when": "editorFocus && inlineChatHasProvider && inlineChatPossible && !editorReadonly"
  },
  {
    "key": "ctrl+z",
    "command": "inlineChat.unstash",
    "when": "inlineChatHasStashedSession && !editorReadonly"
  },
  {
    "key": "ctrl+down",
    "command": "inlineChat.viewInChat",
    "when": "inChatInput && inlineChatHasProvider && inlineChatVisible"
  },
  {
    "key": "ctrl+up",
    "command": "interactive.history.focus",
    "when": "isCompositeNotebook && isLinux && !notebookEditorFocused || isCompositeNotebook && isWindows && !notebookEditorFocused"
  },
  {
    "key": "down",
    "command": "interactive.history.next",
    "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
  },
  {
    "key": "up",
    "command": "interactive.history.previous",
    "when": "isCompositeNotebook && !notebookEditorFocused && !suggestWidgetVisible && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "key": "ctrl+end",
    "command": "interactive.scrollToBottom",
    "when": "activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "ctrl+home",
    "command": "interactive.scrollToTop",
    "when": "activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "enter",
    "command": "keybindings.editor.acceptWhenExpression",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+k ctrl+a",
    "command": "keybindings.editor.addKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "escape",
    "command": "keybindings.editor.clearSearchResults",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "ctrl+c",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "enter",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus && !whenFocus"
  },
  {
    "key": "ctrl+k ctrl+e",
    "command": "keybindings.editor.defineWhenExpression",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "ctrl+down",
    "command": "keybindings.editor.focusKeybindings",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "alt+k",
    "command": "keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "escape",
    "command": "keybindings.editor.rejectWhenExpression",
    "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
  },
  {
    "key": "delete",
    "command": "keybindings.editor.removeKeybinding",
    "when": "inKeybindings && keybindingFocus && !inputFocus"
  },
  {
    "key": "ctrl+f",
    "command": "keybindings.editor.searchKeybindings",
    "when": "inKeybindings"
  },
  {
    "key": "alt+p",
    "command": "keybindings.editor.toggleSortByPrecedence",
    "when": "inKeybindings"
  },
  {
    "key": "escape",
    "command": "list.clear",
    "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "escape",
    "command": "list.closeFind",
    "when": "listFocus && treeFindOpen"
  },
  {
    "key": "left",
    "command": "list.collapse",
    "when": "listFocus && treeElementCanCollapse && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasParent && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+left",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "right",
    "command": "list.expand",
    "when": "listFocus && treeElementCanExpand && !inputFocus && !treestickyScrollFocused || listFocus && treeElementHasChild && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "shift+down",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "shift+up",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "f3",
    "command": "list.find",
    "when": "listFocus && listSupportsFind"
  },
  {
    "key": "ctrl+alt+f",
    "command": "list.find",
    "when": "listFocus && listSupportsFind"
  },
  {
    "key": "alt+down",
    "command": "list.focusAnyDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "alt+home",
    "command": "list.focusAnyFirst",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "alt+end",
    "command": "list.focusAnyLast",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "alt+up",
    "command": "list.focusAnyUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "down",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "home",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "end",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "pagedown",
    "command": "list.focusPageDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "pageup",
    "command": "list.focusPageUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "up",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+down",
    "command": "list.scrollDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'bottom'"
  },
  {
    "key": "ctrl+up",
    "command": "list.scrollUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused && listScrollAtBoundary != 'both' && listScrollAtBoundary != 'top'"
  },
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+a",
    "command": "list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "list.showHover",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "space",
    "command": "list.toggleExpand",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "list.toggleSelection",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "backspace",
    "command": "noteMultiCursor.deleteLeft",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'"
  },
  {
    "key": "delete",
    "command": "noteMultiCursor.deleteRight",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '1' || config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook' && notebookMultiSelectCursorState == '2'"
  },
  {
    "key": "escape",
    "command": "noteMultiCursor.exit",
    "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+d",
    "command": "notebook.addFindMatchToSelection",
    "when": "config.notebook.multiCursor.enabled && notebookCellEditorFocused && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "y",
    "command": "notebook.cell.changeToCode",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
  },
  {
    "key": "m",
    "command": "notebook.cell.changeToMarkdown",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputFocused && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
  },
  {
    "key": "enter",
    "command": "notebook.cell.chat.accept",
    "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.chat.acceptChanges",
    "when": "notebookEditorFocused && !inputFocus && !notebookCellEditorFocused && notebookChatOuterFocusPosition == 'below'"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.cell.chat.focus",
    "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'above'"
  },
  {
    "key": "ctrl+up",
    "command": "notebook.cell.chat.focus",
    "when": "notebookEditorFocused && !inputFocus && notebookChatOuterFocusPosition == 'below'"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.cell.chat.focusNextCell",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "key": "ctrl+up",
    "command": "notebook.cell.chat.focusPreviousCell",
    "when": "inlineChatFocused && notebookCellChatFocused"
  },
  {
    "key": "ctrl+k i",
    "command": "notebook.cell.chat.start",
    "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "key": "ctrl+i",
    "command": "notebook.cell.chat.start",
    "when": "config.notebook.experimental.cellChat && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus || config.notebook.experimental.generate && notebookChatAgentRegistered && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+delete",
    "command": "notebook.cell.clearOutputs",
    "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "notebook.cell.collapseCellInput",
    "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
  },
  {
    "key": "ctrl+k t",
    "command": "notebook.cell.collapseCellOutput",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
  },
  {
    "key": "shift+alt+down",
    "command": "notebook.cell.copyDown",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "shift+alt+up",
    "command": "notebook.cell.copyUp",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "delete",
    "command": "notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+alt+d",
    "command": "notebook.cell.detectLanguage",
    "when": "notebookCellEditable && notebookEditable"
  },
  {
    "key": "enter",
    "command": "notebook.cell.edit",
    "when": "notebookCellListFocused && notebookEditable && !editorHoverFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+k ctrl+c",
    "command": "notebook.cell.expandCellInput",
    "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
  },
  {
    "key": "ctrl+k t",
    "command": "notebook.cell.expandCellOutput",
    "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
  },
  {
    "key": "ctrl+shift+down",
    "command": "notebook.cell.focusInOutput",
    "when": "notebookCellHasOutputs && notebookEditorFocused"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.cell.focusInOutput",
    "when": "isWindows && notebookCellHasOutputs && notebookEditorFocused && !isCompositeNotebook"
  },
  {
    "key": "ctrl+shift+up",
    "command": "notebook.cell.focusOutOutput",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "notebook.cell.insertCodeCellAbove",
    "when": "notebookCellListFocused && !inputFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.insertCodeCellBelow",
    "when": "notebookCellListFocused && !inputFocus && notebookChatOuterFocusPosition == ''"
  },
  {
    "key": "shift+alt+win+j",
    "command": "notebook.cell.joinAbove",
    "when": "notebookEditorFocused"
  },
  {
    "key": "alt+win+j",
    "command": "notebook.cell.joinBelow",
    "when": "notebookEditorFocused"
  },
  {
    "key": "alt+down",
    "command": "notebook.cell.moveDown",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+up",
    "command": "notebook.cell.moveUp",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "ctrl+.",
    "command": "notebook.cell.openFailureActions",
    "when": "notebookCellFocused && notebookCellHasErrorDiagnostics && !notebookCellEditorFocused"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "notebook.cell.split",
    "when": "editorTextFocus && notebookCellEditable && notebookEditable && notebookEditorFocused"
  },
  {
    "key": "ctrl+k y",
    "command": "notebook.cell.toggleOutputScrolling",
    "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "notebook.centerActiveCell",
    "when": "notebookEditorFocused"
  },
  {
    "key": "ctrl+/",
    "command": "notebook.commentSelectedCells",
    "when": "notebookEditable && notebookEditorFocused && !inputFocus"
  },
  {
    "key": "alt+f3",
    "command": "notebook.diff.action.next",
    "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
  },
  {
    "key": "shift+alt+f3",
    "command": "notebook.diff.action.previous",
    "when": "activeEditor == 'workbench.editor.notebookTextDiffEditor'"
  },
  {
    "key": "ctrl+f",
    "command": "notebook.find",
    "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+end",
    "command": "notebook.focusBottom",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "down",
    "command": "notebook.focusNextEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  {
    "key": "ctrl+down",
    "command": "notebook.focusNextEditor",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "up",
    "command": "notebook.focusPreviousEditor",
    "when": "config.notebook.navigation.allowNavigateToSurroundingCells && notebookCursorNavigationMode && notebookEditorFocused && !accessibilityModeEnabled && !isEmbeddedDiffEditor && !notebookCellMarkdownEditMode && notebookCellType == 'markup'"
  },
  {
    "key": "ctrl+home",
    "command": "notebook.focusTop",
    "when": "notebookEditorFocused && !inputFocus"
  },
  {
    "key": "left",
    "command": "notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+shift+[",
    "command": "notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "shift+alt+f",
    "command": "notebook.format",
    "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "escape",
    "command": "notebook.hideFind",
    "when": "notebookEditorFocused && notebookFindWidgetFocused"
  },
  {
    "key": "right",
    "command": "notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+shift+]",
    "command": "notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "ctrl+shift+a",
    "command": "notification.acceptPrimaryAction",
    "when": "notificationFocus || notificationToastsVisible"
  },
  {
    "key": "delete",
    "command": "notification.clear",
    "when": "notificationFocus"
  },
  {
    "key": "left",
    "command": "notification.collapse",
    "when": "notificationFocus"
  },
  {
    "key": "right",
    "command": "notification.expand",
    "when": "notificationFocus"
  },
  {
    "key": "enter",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "space",
    "command": "notification.toggle",
    "when": "notificationFocus"
  },
  {
    "key": "home",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "pageup",
    "command": "notifications.focusFirstToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "end",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "pagedown",
    "command": "notifications.focusLastToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "down",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "up",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "ctrl+k ctrl+shift+n",
    "command": "notifications.showList"
  },
  {
    "key": "escape",
    "command": "problems.action.clearFilterText",
    "when": "problemsFilterFocus"
  },
  {
    "key": "ctrl+c",
    "command": "problems.action.copy",
    "when": "problemsVisibility && !relatedInformationFocus && focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+f",
    "command": "problems.action.focusFilter",
    "when": "focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+down",
    "command": "problems.action.focusProblemsFromFilter",
    "when": "problemsFilterFocus"
  },
  {
    "key": "enter",
    "command": "problems.action.open",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "problems.action.openToSide",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+.",
    "command": "problems.action.showQuickFixes",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+alt+home",
    "command": "quickInput.first",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+home",
    "command": "quickInput.first",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+alt+end",
    "command": "quickInput.last",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+end",
    "command": "quickInput.last",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+down",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "down",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+alt+down",
    "command": "quickInput.nextSeparator",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+down",
    "command": "quickInput.nextSeparatorWithQuickAccessFallback",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+alt+pagedown",
    "command": "quickInput.pageNext",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+pagedown",
    "command": "quickInput.pageNext",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+pagedown",
    "command": "quickInput.pageNext",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "pagedown",
    "command": "quickInput.pageNext",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+alt+pageup",
    "command": "quickInput.pagePrevious",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+pageup",
    "command": "quickInput.pagePrevious",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+pageup",
    "command": "quickInput.pagePrevious",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "pageup",
    "command": "quickInput.pagePrevious",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+up",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "up",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+alt+up",
    "command": "quickInput.previousSeparator",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+up",
    "command": "quickInput.previousSeparatorWithQuickAccessFallback",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "space",
    "command": "refactorPreview.toggleCheckedState",
    "when": "listFocus && refactorPreview.enabled && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "shift+alt+r",
    "command": "revealFileInOS",
    "when": "!editorFocus"
  },
  {
    "key": "enter",
    "command": "revealReference",
    "when": "listFocus && referenceSearchVisible && !inputFocus && !treeElementCanCollapse && !treeElementCanExpand && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+k s",
    "command": "saveAll"
  },
  {
    "key": "ctrl+enter",
    "command": "scm.acceptInput",
    "when": "scmRepository"
  },
  {
    "key": "escape",
    "command": "scm.clearInput",
    "when": "scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "alt+down",
    "command": "scm.forceViewNextCommit",
    "when": "scmRepository"
  },
  {
    "key": "alt+up",
    "command": "scm.forceViewPreviousCommit",
    "when": "scmRepository"
  },
  {
    "key": "down",
    "command": "scm.viewNextCommit",
    "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "up",
    "command": "scm.viewPreviousCommit",
    "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
  },
  {
    "key": "escape",
    "command": "search.action.cancel",
    "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
  },
  {
    "key": "ctrl+c",
    "command": "search.action.copyMatch",
    "when": "fileMatchOrMatchFocus"
  },
  {
    "key": "shift+alt+c",
    "command": "search.action.copyPath",
    "when": "fileMatchOrFolderMatchWithResourceFocus"
  },
  {
    "key": "f4",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "shift+f4",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor"
  },
  {
    "key": "ctrl+up",
    "command": "search.action.focusSearchFromResults",
    "when": "accessibilityModeEnabled && searchViewletVisible || firstMatchFocus && searchViewletVisible"
  },
  {
    "key": "alt+enter",
    "command": "search.action.openInEditor",
    "when": "hasSearchResult && searchViewletFocus"
  },
  {
    "key": "enter",
    "command": "search.action.openResult",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "search.action.openResultToSide",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "delete",
    "command": "search.action.remove",
    "when": "fileMatchOrMatchFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "search.action.replace",
    "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "search.action.replaceAllInFile",
    "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "ctrl+shift+1",
    "command": "search.action.replaceAllInFolder",
    "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"
  },
  {
    "key": "shift+alt+f",
    "command": "search.action.restrictSearchToFolder",
    "when": "folderMatchWithResourceFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+down",
    "command": "search.focus.nextInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
  },
  {
    "key": "ctrl+up",
    "command": "search.focus.previousInputBox",
    "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "selectAllSearchEditorMatches",
    "when": "inSearchEditor"
  },
  {
    "key": "escape",
    "command": "settings.action.focusLevelUp",
    "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
  },
  {
    "key": "enter",
    "command": "settings.action.focusSettingControl",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "key": "down",
    "command": "settings.action.focusSettingsFromSearch",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "enter",
    "command": "settings.action.focusSettingsList",
    "when": "inSettingsEditor && settingsTocRowFocus"
  },
  {
    "key": "left",
    "command": "settings.action.focusTOC",
    "when": "inSettingsEditor && settingRowFocus"
  },
  {
    "key": "shift+f9",
    "command": "settings.action.showContextMenu",
    "when": "inSettingsEditor"
  },
  {
    "key": "ctrl+; ctrl+x",
    "command": "testing.cancelRun"
  },
  {
    "key": "ctrl+; ctrl+shift+a",
    "command": "testing.coverageAll"
  },
  {
    "key": "ctrl+; ctrl+shift+c",
    "command": "testing.coverageAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+shift+f",
    "command": "testing.coverageCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+shift+l",
    "command": "testing.coverageLastRun"
  },
  {
    "key": "ctrl+; ctrl+a",
    "command": "testing.debugAll"
  },
  {
    "key": "ctrl+; ctrl+c",
    "command": "testing.debugAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+f",
    "command": "testing.debugCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+e",
    "command": "testing.debugFailTests"
  },
  {
    "key": "ctrl+; ctrl+l",
    "command": "testing.debugLastRun"
  },
  {
    "key": "ctrl+; ctrl+m",
    "command": "testing.openOutputPeek"
  },
  {
    "key": "ctrl+; e",
    "command": "testing.reRunFailTests"
  },
  {
    "key": "ctrl+; l",
    "command": "testing.reRunLastRun"
  },
  {
    "key": "ctrl+; ctrl+r",
    "command": "testing.refreshTests",
    "when": "testing.canRefresh"
  },
  {
    "key": "ctrl+; a",
    "command": "testing.runAll"
  },
  {
    "key": "ctrl+; c",
    "command": "testing.runAtCursor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; f",
    "command": "testing.runCurrentFile",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+; ctrl+o",
    "command": "testing.showMostRecentOutput",
    "when": "testing.hasAnyResults"
  },
  {
    "key": "ctrl+; ctrl+shift+i",
    "command": "testing.toggleInlineCoverage"
  },
  {
    "key": "ctrl+; ctrl+i",
    "command": "testing.toggleInlineTestOutput"
  },
  {
    "key": "alt+h",
    "command": "testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible"
  },
  {
    "key": "alt+c",
    "command": "toggleSearchCaseSensitive",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+c",
    "command": "toggleSearchEditorCaseSensitive",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+l",
    "command": "toggleSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "alt+r",
    "command": "toggleSearchEditorRegex",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+w",
    "command": "toggleSearchEditorWholeWord",
    "when": "inSearchEditor && searchInputBoxFocus"
  },
  {
    "key": "alt+p",
    "command": "toggleSearchPreserveCase",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+r",
    "command": "toggleSearchRegex",
    "when": "searchViewletFocus"
  },
  {
    "key": "alt+w",
    "command": "toggleSearchWholeWord",
    "when": "searchViewletFocus"
  },
  {
    "key": "ctrl+alt+win+n",
    "command": "welcome.showNewFileEntries"
  },
  {
    "key": "ctrl+down",
    "command": "widgetNavigation.focusNext",
    "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'bottom'"
  },
  {
    "key": "ctrl+up",
    "command": "widgetNavigation.focusPrevious",
    "when": "inputFocus && navigableContainerFocused || navigableContainerFocused && treestickyScrollFocused || navigableContainerFocused && !listFocus || navigableContainerFocused && listScrollAtBoundary == 'both' || navigableContainerFocused && listScrollAtBoundary == 'top'"
  },
  {
    "key": "alt+backspace",
    "command": "workbench.action.chat.cancel"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.chat.focusInput",
    "when": "inChat && !inChatInput && !quickChatHasFocus"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.chat.focusInput",
    "when": "inChat && quickChatHasFocus && !inChatInput"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.chat.holdToVoiceChatInChatView",
    "when": "chatIsEnabled && hasSpeechProvider && !chatSessionRequestInProgress && !editorFocus && !inChatInput && !inlineChatFocused && !notebookEditorFocused"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.chat.newChat",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "ctrl+alt+pagedown",
    "command": "workbench.action.chat.nextCodeBlock",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "ctrl+f9",
    "command": "workbench.action.chat.nextFileTree",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "ctrl+alt+i",
    "command": "workbench.action.chat.open"
  },
  {
    "key": "ctrl+alt+pageup",
    "command": "workbench.action.chat.previousCodeBlock",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "ctrl+shift+f9",
    "command": "workbench.action.chat.previousFileTree",
    "when": "chatIsEnabled && inChat"
  },
  {
    "key": "delete",
    "command": "workbench.action.chat.remove",
    "when": "inChat && !inChatInput"
  },
  {
    "key": "ctrl+shift+enter",
    "command": "workbench.action.chat.sendToNewChat",
    "when": "chatInputHasText && inChatInput && !chatSessionRequestInProgress"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.chat.startVoiceChat",
    "when": "chatIsEnabled && hasSpeechProvider && inChatInput && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest || chatIsEnabled && hasSpeechProvider && inlineChatFocused && !chatSessionRequestInProgress && !editorFocus && !notebookEditorFocused && !scopedVoiceChatGettingReady && !speechToTextInProgress && !terminalChatActiveRequest"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.chat.stopListeningAndSubmit",
    "when": "inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inChatInput && voiceChatInProgress && scopedVoiceChatInProgress == 'view' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || inlineChatFocused && voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+f4",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+k ctrl+w",
    "command": "workbench.action.closeAllEditors"
  },
  {
    "key": "ctrl+k ctrl+shift+w",
    "command": "workbench.action.closeAllGroups"
  },
  {
    "key": "ctrl+k w",
    "command": "workbench.action.closeEditorsInGroup"
  },
  {
    "key": "ctrl+k f",
    "command": "workbench.action.closeFolder",
    "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+f4",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "escape",
    "command": "workbench.action.closeQuickOpen",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k u",
    "command": "workbench.action.closeUnmodifiedEditors"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.closeWindow"
  },
  {
    "key": "alt+f4",
    "command": "workbench.action.closeWindow"
  },
  {
    "key": "alt+f5",
    "command": "workbench.action.compareEditor.nextChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "ctrl+k shift+o",
    "command": "workbench.action.compareEditor.openSide",
    "when": "inDiffEditor"
  },
  {
    "key": "shift+alt+f5",
    "command": "workbench.action.compareEditor.previousChange",
    "when": "textCompareEditorVisible"
  },
  {
    "key": "ctrl+k o",
    "command": "workbench.action.copyEditorToNewWindow",
    "when": "activeEditor"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.disconnect",
    "when": "focusedSessionIsAttach && inDebugMode"
  },
  {
    "key": "ctrl+shift+f5",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  {
    "key": "ctrl+f5",
    "command": "workbench.action.debug.run",
    "when": "debuggersAvailable && debugState != 'initializing'"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.start",
    "when": "debuggersAvailable && debugState == 'inactive'"
  },
  {
    "key": "ctrl+f11",
    "command": "workbench.action.debug.stepIntoTarget",
    "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"
  },
  {
    "key": "shift+f11",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f10",
    "command": "workbench.action.debug.stepOver",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "shift+f5",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "ctrl+k m",
    "command": "workbench.action.editor.changeLanguageMode",
    "when": "!notebookEditorFocused"
  },
  {
    "key": "alt+`",
    "command": "workbench.action.editorDictation.start",
    "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress"
  },
  {
    "key": "ctrl+alt+v",
    "command": "workbench.action.editorDictation.start",
    "when": "hasSpeechProvider && !editorReadonly && !speechToTextInProgress"
  },
  {
    "key": "ctrl+k p",
    "command": "workbench.action.files.copyPathOfActiveFile"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFile",
    "when": "true"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFileFolder",
    "when": "isMacNative && openFolderWorkspaceSupport"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "workbench.action.files.openFolder",
    "when": "openFolderWorkspaceSupport"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openFolderViaWorkspace",
    "when": "!openFolderWorkspaceSupport && workbenchState == 'workspace'"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.files.openLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+k ctrl+o",
    "command": "workbench.action.files.openLocalFolder",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+k r",
    "command": "workbench.action.files.revealActiveFileInWindows"
  },
  {
    "key": "ctrl+s",
    "command": "workbench.action.files.save"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveAs"
  },
  {
    "key": "ctrl+shift+s",
    "command": "workbench.action.files.saveLocalFile",
    "when": "remoteFileDialogVisible"
  },
  {
    "key": "ctrl+k ctrl+shift+s",
    "command": "workbench.action.files.saveWithoutFormatting"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.findInFiles"
  },
  {
    "key": "ctrl+k ctrl+up",
    "command": "workbench.action.focusAboveGroup"
  },
  {
    "key": "ctrl+k ctrl+down",
    "command": "workbench.action.focusBelowGroup"
  },
  {
    "key": "ctrl+8",
    "command": "workbench.action.focusEighthEditorGroup"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.focusFifthEditorGroup"
  },
  {
    "key": "ctrl+1",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.focusFourthEditorGroup"
  },
  {
    "key": "ctrl+k ctrl+left",
    "command": "workbench.action.focusLeftGroup"
  },
  {
    "key": "f6",
    "command": "workbench.action.focusNextPart"
  },
  {
    "key": "shift+f6",
    "command": "workbench.action.focusPreviousPart"
  },
  {
    "key": "ctrl+k ctrl+right",
    "command": "workbench.action.focusRightGroup"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.focusSeventhEditorGroup"
  },
  {
    "key": "ctrl+0",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "ctrl+6",
    "command": "workbench.action.focusSixthEditorGroup"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.focusThirdEditorGroup"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.gotoLine"
  },
  {
    "key": "ctrl+shift+o",
    "command": "workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },
  {
    "key": "down",
    "command": "workbench.action.interactivePlayground.arrowDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "up",
    "command": "workbench.action.interactivePlayground.arrowUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "pagedown",
    "command": "workbench.action.interactivePlayground.pageDown",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "pageup",
    "command": "workbench.action.interactivePlayground.pageUp",
    "when": "interactivePlaygroundFocus && !editorTextFocus"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "workbench.action.joinEditorInGroup",
    "when": "sideBySideEditorActive"
  },
  {
    "key": "ctrl+k enter",
    "command": "workbench.action.keepEditor"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "workbench.action.keybindingsReference"
  },
  {
    "key": "ctrl+9",
    "command": "workbench.action.lastEditorInGroup"
  },
  {
    "key": "alt+0",
    "command": "workbench.action.lastEditorInGroup"
  },
  {
    "key": "ctrl+k down",
    "command": "workbench.action.moveActiveEditorGroupDown"
  },
  {
    "key": "ctrl+k left",
    "command": "workbench.action.moveActiveEditorGroupLeft"
  },
  {
    "key": "ctrl+k right",
    "command": "workbench.action.moveActiveEditorGroupRight"
  },
  {
    "key": "ctrl+k up",
    "command": "workbench.action.moveActiveEditorGroupUp"
  },
  {
    "key": "ctrl+shift+pageup",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  {
    "key": "ctrl+shift+pagedown",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  {
    "key": "shift+alt+1",
    "command": "workbench.action.moveEditorToFirstGroup"
  },
  {
    "key": "shift+alt+9",
    "command": "workbench.action.moveEditorToLastGroup"
  },
  {
    "key": "ctrl+alt+right",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "ctrl+alt+left",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "alt+left",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "alt+right",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateForward"
  },
  {
    "key": "ctrl+k ctrl+q",
    "command": "workbench.action.navigateToLastEditLocation"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.newWindow"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "ctrl+k ctrl+pagedown",
    "command": "workbench.action.nextEditorInGroup"
  },
  {
    "key": "alt+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "alt+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "alt+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "alt+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "alt+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "alt+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "alt+7",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "alt+8",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "alt+9",
    "command": "workbench.action.openEditorAtIndex9"
  },
  {
    "key": "ctrl+k ctrl+s",
    "command": "workbench.action.openGlobalKeybindings"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.openRecent"
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.openSettings"
  },
  {
    "key": "ctrl+shift+u",
    "command": "workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "workbench.action.pinEditor",
    "when": "!activeEditorIsPinned"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "ctrl+k ctrl+pageup",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.quickOpenView"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.quickchat.toggle",
    "when": "chatIsEnabled"
  },
  {
    "key": "ctrl+alt+o",
    "command": "workbench.action.remote.showMenu"
  },
  {
    "key": "ctrl+shift+t",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.replaceInFiles"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.search.toggleQueryDetails",
    "when": "inSearchEditor || searchViewletFocus"
  },
  {
    "key": "ctrl+k ctrl+t",
    "command": "workbench.action.selectTheme"
  },
  {
    "key": "ctrl+k ctrl+p",
    "command": "workbench.action.showAllEditors"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "f1",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "ctrl+\\",
    "command": "workbench.action.splitEditor"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.splitEditorDown"
  },
  {
    "key": "ctrl+k ctrl+shift+\\",
    "command": "workbench.action.splitEditorInGroup",
    "when": "activeEditorCanSplitInGroup"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.splitEditorLeft"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.splitEditorRight"
  },
  {
    "key": "ctrl+k ctrl+\\",
    "command": "workbench.action.splitEditorUp"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.tasks.build",
    "when": "taskCommandsRegistered"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.terminal.chat.close",
    "when": "terminalChatFocus && terminalChatVisible"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.chat.close",
    "when": "terminalChatFocus && terminalChatVisible"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.terminal.chat.focusInput",
    "when": "terminalChatFocus && !inlineChatFocused"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.chat.focusInput",
    "when": "terminalChatFocus && !inlineChatFocused"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.chat.focusResponse",
    "when": "terminalChatFocus"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "workbench.action.terminal.chat.insertCommand",
    "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
  },
  {
    "key": "alt+enter",
    "command": "workbench.action.terminal.chat.insertCommand",
    "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "workbench.action.terminal.chat.insertFirstCommand",
    "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
  },
  {
    "key": "alt+enter",
    "command": "workbench.action.terminal.chat.insertFirstCommand",
    "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
  },
  {
    "key": "enter",
    "command": "workbench.action.terminal.chat.makeRequest",
    "when": "terminalChatFocus && terminalHasBeenCreated && !inlineChatEmpty && !terminalChatActiveRequest || terminalChatFocus && terminalProcessSupported && !inlineChatEmpty && !terminalChatActiveRequest"
  },
  {
    "key": "down",
    "command": "workbench.action.terminal.chat.nextFromHistory",
    "when": "terminalChatFocus"
  },
  {
    "key": "up",
    "command": "workbench.action.terminal.chat.previousFromHistory",
    "when": "terminalChatFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.terminal.chat.runCommand",
    "when": "terminalChatResponseContainsCodeBlock && terminalHasBeenCreated && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks || terminalChatResponseContainsCodeBlock && terminalProcessSupported && !terminalChatActiveRequest && !terminalChatResponseContainsMultipleCodeBlocks"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.terminal.chat.runFirstCommand",
    "when": "terminalChatResponseContainsMultipleCodeBlocks && terminalHasBeenCreated && !terminalChatActiveRequest || terminalChatResponseContainsMultipleCodeBlocks && terminalProcessSupported && !terminalChatActiveRequest"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.clearSelection",
    "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.terminal.copyAndClearSelection",
    "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
  },
  {
    "key": "f3",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.findNext",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "key": "shift+f3",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "enter",
    "command": "workbench.action.terminal.findPrevious",
    "when": "terminalFindInputFocused && terminalHasBeenCreated || terminalFindInputFocused && terminalProcessSupported"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.focus",
    "when": "accessibilityModeEnabled && accessibleViewOnLastLine && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewOnLastLine && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.focusAccessibleBuffer",
    "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+f2",
    "command": "workbench.action.terminal.focusAccessibleBuffer",
    "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+k ctrl+i",
    "command": "workbench.action.terminal.focusHover",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalIsOpen || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "alt+down",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+right",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "alt+up",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+left",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+\\",
    "command": "workbench.action.terminal.focusTabs",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+g",
    "command": "workbench.action.terminal.goToRecentDirectory",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.hideFind",
    "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "delete",
    "command": "workbench.action.terminal.killActiveTab",
    "when": "terminalHasBeenCreated && terminalTabsFocus || terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+f4",
    "command": "workbench.action.terminal.killEditor",
    "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated || terminalEditorFocus && terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+`",
    "command": "workbench.action.terminal.new",
    "when": "terminalProcessSupported || terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+c",
    "command": "workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+shift+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+v",
    "command": "workbench.action.terminal.paste",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "f2",
    "command": "workbench.action.terminal.renameActiveTab",
    "when": "terminalHasBeenCreated && terminalTabsFocus && terminalTabsSingularSelection || terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.terminal.runRecentCommand",
    "when": "accessibilityModeEnabled && terminalFocus && terminalHasBeenCreated || accessibilityModeEnabled && terminalFocus && terminalProcessSupported || accessibilityModeEnabled && accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibilityModeEnabled && accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+alt+r",
    "command": "workbench.action.terminal.runRecentCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+alt+pagedown",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "shift+pagedown",
    "command": "workbench.action.terminal.scrollDownPage",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+end",
    "command": "workbench.action.terminal.scrollToBottom",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+end",
    "command": "workbench.action.terminal.scrollToBottomAccessibleView",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.scrollToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.scrollToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated && !accessibilityModeEnabled || terminalFocus && terminalProcessSupported && !accessibilityModeEnabled"
  },
  {
    "key": "ctrl+home",
    "command": "workbench.action.terminal.scrollToTop",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+home",
    "command": "workbench.action.terminal.scrollToTopAccessibleView",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "ctrl+alt+pageup",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "shift+pageup",
    "command": "workbench.action.terminal.scrollUpPage",
    "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"
  },
  {
    "key": "ctrl+shift+down",
    "command": "workbench.action.terminal.selectToNextCommand",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+up",
    "command": "workbench.action.terminal.selectToPreviousCommand",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "ctrl+v",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u0016"
    }
  },
  {
    "key": "ctrl+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~a"
    }
  },
  {
    "key": "alt+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~b"
    }
  },
  {
    "key": "shift+enter",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~c"
    }
  },
  {
    "key": "ctrl+alt+r",
    "command": "workbench.action.terminal.sendSequence",
    "when": "accessibilityModeEnabled && terminalFocus",
    "args": {
      "text": "\u0012"
    }
  },
  {
    "key": "ctrl+alt+g",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0007"
    }
  },
  {
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0017"
    }
  },
  {
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus && terminalShellType == 'cmd'",
    "args": {
      "text": "\b"
    }
  },
  {
    "key": "ctrl+delete",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001bd"
    }
  },
  {
    "key": "ctrl+shift+2",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u0000"
    }
  },
  {
    "key": "ctrl+shift+6",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001e"
    }
  },
  {
    "key": "ctrl+/",
    "command": "workbench.action.terminal.sendSequence",
    "when": "terminalFocus",
    "args": {
      "text": "\u001f"
    }
  },
  {
    "key": "ctrl+space",
    "command": "workbench.action.terminal.sendSequence",
    "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
    "args": {
      "text": "\u001b[24~e"
    }
  },
  {
    "key": "ctrl+.",
    "command": "workbench.action.terminal.showQuickFixes",
    "when": "terminalFocus"
  },
  {
    "key": "alt+z",
    "command": "workbench.action.terminal.sizeToContentWidth",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
  },
  {
    "key": "ctrl+shift+5",
    "command": "workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },
  {
    "key": "ctrl+shift+5",
    "command": "workbench.action.terminal.splitActiveTab",
    "when": "terminalProcessSupported && terminalTabsFocus"
  },
  {
    "key": "alt+c",
    "command": "workbench.action.terminal.toggleFindCaseSensitive",
    "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
  },
  {
    "key": "alt+r",
    "command": "workbench.action.terminal.toggleFindRegex",
    "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
  },
  {
    "key": "alt+w",
    "command": "workbench.action.terminal.toggleFindWholeWord",
    "when": "terminalFindVisible && terminalHasBeenCreated || terminalFindVisible && terminalProcessSupported"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+alt+b",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "shift+alt+0",
    "command": "workbench.action.toggleEditorGroupLayout"
  },
  {
    "key": "f11",
    "command": "workbench.action.toggleFullScreen",
    "when": "!isIOS"
  },
  {
    "key": "ctrl+k ctrl+m",
    "command": "workbench.action.toggleMaximizeEditorGroup",
    "when": "editorPartMaximizedEditorGroup || editorPartMultipleEditorGroups"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "ctrl+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "ctrl+k z",
    "command": "workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "workbench.action.unpinEditor",
    "when": "activeEditorIsPinned"
  },
  {
    "key": "ctrl+numpad_add",
    "command": "workbench.action.zoomIn"
  },
  {
    "key": "ctrl+shift+=",
    "command": "workbench.action.zoomIn"
  },
  {
    "key": "ctrl+=",
    "command": "workbench.action.zoomIn"
  },
  {
    "key": "ctrl+numpad_subtract",
    "command": "workbench.action.zoomOut"
  },
  {
    "key": "ctrl+shift+-",
    "command": "workbench.action.zoomOut"
  },
  {
    "key": "ctrl+-",
    "command": "workbench.action.zoomOut"
  },
  {
    "key": "ctrl+numpad0",
    "command": "workbench.action.zoomReset"
  },
  {
    "key": "ctrl+shift+m",
    "command": "workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active"
  },
  {
    "key": "escape",
    "command": "workbench.banner.focusBanner",
    "when": "bannerFocused"
  },
  {
    "key": "down",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused"
  },
  {
    "key": "right",
    "command": "workbench.banner.focusNextAction",
    "when": "bannerFocused"
  },
  {
    "key": "up",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused"
  },
  {
    "key": "left",
    "command": "workbench.banner.focusPreviousAction",
    "when": "bannerFocused"
  },
  {
    "key": "ctrl+shift+y",
    "command": "workbench.debug.action.toggleRepl",
    "when": "workbench.panel.repl.view.active"
  },
  {
    "key": "ctrl+k c",
    "command": "workbench.files.action.compareWithClipboard"
  },
  {
    "key": "ctrl+k d",
    "command": "workbench.files.action.compareWithSaved"
  },
  {
    "key": "ctrl+k e",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active"
  },
  {
    "key": "escape",
    "command": "workbench.statusBar.clearFocus",
    "when": "statusBarFocused"
  },
  {
    "key": "home",
    "command": "workbench.statusBar.focusFirst",
    "when": "statusBarFocused"
  },
  {
    "key": "end",
    "command": "workbench.statusBar.focusLast",
    "when": "statusBarFocused"
  },
  {
    "key": "down",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "right",
    "command": "workbench.statusBar.focusNext",
    "when": "statusBarFocused"
  },
  {
    "key": "up",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "left",
    "command": "workbench.statusBar.focusPrevious",
    "when": "statusBarFocused"
  },
  {
    "key": "ctrl+shift+d",
    "command": "workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.view.explorer",
    "when": "viewContainer.workbench.view.explorer.enabled"
  },
  {
    "key": "ctrl+shift+x",
    "command": "workbench.view.extensions",
    "when": "viewContainer.workbench.view.extensions.enabled"
  },
  {
    "key": "ctrl+shift+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.view.search",
    "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
  },
  {
    "key": "ctrl+right",
    "command": "breadcrumbs.focusNextWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+left",
    "command": "breadcrumbs.focusPreviousWithPicker",
    "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "escape",
    "command": "breadcrumbs.selectEditor",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "tab",
    "command": "editor.action.inlineSuggest.jump",
    "when": "inlineEditIsVisible && !cursorAtInlineEdit && !editor.hasSelection && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
  },
  {
    "key": "f3",
    "command": "list.find.replInputFocus",
    "when": "view == 'workbench.panel.repl.view'"
  },
  {
    "key": "ctrl+alt+f",
    "command": "list.find.replInputFocus",
    "when": "view == 'workbench.panel.repl.view'"
  },
  {
    "key": "down",
    "command": "notebook.cell.nullAction",
    "when": "notebookOutputInputFocused"
  },
  {
    "key": "up",
    "command": "notebook.cell.nullAction",
    "when": "notebookOutputInputFocused"
  },
  {
    "key": "ctrl+a",
    "command": "notebook.cell.output.selectAll",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "ctrl+pagedown",
    "command": "notebook.focusNextEditor",
    "when": "accessibilityModeEnabled && notebookCellEditorFocused"
  },
  {
    "key": "ctrl+pageup",
    "command": "notebook.focusPreviousEditor",
    "when": "accessibilityModeEnabled && notebookCellEditorFocused"
  },
  {
    "key": "ctrl+k down",
    "command": "views.moveViewDown",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k left",
    "command": "views.moveViewLeft",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k right",
    "command": "views.moveViewRight",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+k up",
    "command": "views.moveViewUp",
    "when": "focusedView != ''"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.debug.nextConsole",
    "when": "inDebugRepl"
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.debug.prevConsole",
    "when": "inDebugRepl"
  },
  {
    "key": "tab",
    "command": "workbench.action.terminal.acceptSelectedSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "enter",
    "command": "workbench.action.terminal.acceptSelectedSuggestionEnter",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore' || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible && config.terminal.integrated.suggest.runOnEnter != 'ignore'"
  },
  {
    "key": "escape",
    "command": "workbench.action.terminal.hideSuggestWidget",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "ctrl+shift+o",
    "command": "workbench.action.terminal.openDetectedLink",
    "when": "terminalFocus && terminalHasBeenCreated"
  },
  {
    "key": "ctrl+shift+g",
    "command": "workbench.action.terminal.openDetectedLink",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "pagedown",
    "command": "workbench.action.terminal.selectNextPageSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "down",
    "command": "workbench.action.terminal.selectNextSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "pageup",
    "command": "workbench.action.terminal.selectPrevPageSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "up",
    "command": "workbench.action.terminal.selectPrevSuggestion",
    "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
  },
  {
    "key": "f6",
    "command": "workbench.action.debug.pause",
    "when": "debugState == 'running'"
  },
  {
    "key": "alt+down",
    "command": "workbench.action.terminal.accessibleBufferGoToNextCommand",
    "when": "accessibleViewIsShown && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "alt+up",
    "command": "workbench.action.terminal.accessibleBufferGoToPreviousCommand",
    "when": "accessibleViewIsShown && terminalHasBeenCreated && accessibleViewCurrentProviderId == 'terminal' || accessibleViewIsShown && terminalProcessSupported && accessibleViewCurrentProviderId == 'terminal'"
  },
  {
    "key": "f2",
    "command": "debug.renameWatchExpression",
    "when": "watchExpressionsFocused"
  },
  {
    "key": "f2",
    "command": "debug.setVariable",
    "when": "variablesFocused"
  },
  {
    "key": "space",
    "command": "debug.toggleBreakpoint",
    "when": "breakpointsFocused && !inputFocus"
  },
  {
    "key": "ctrl+up",
    "command": "interactive.history.focus",
    "when": "isCompositeNotebook && !notebookEditorFocused && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
  },
  {
    "key": "ctrl+down",
    "command": "interactive.input.focus",
    "when": "isCompositeNotebook && notebookEditorFocused"
  },
  {
    "key": "escape",
    "command": "notebook.cell.quitEdit",
    "when": "notebookEditorFocused && notebookOutputFocused"
  },
  {
    "key": "ctrl+v",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "key": "shift+delete",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "key": "delete",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "key": "ctrl+shift+.",
    "command": "editor.action.accessibleViewGoToSymbol",
    "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
  },
  {
    "key": "ctrl+shift+o",
    "command": "editor.action.accessibleViewGoToSymbol",
    "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"
  },
  {
    "key": "ctrl+e",
    "command": "editor.action.toggleScreenReaderAccessibilityMode",
    "when": "accessibilityHelpIsShown"
  },
  {
    "key": "shift+alt+f1",
    "command": "editor.action.toggleScreenReaderAccessibilityMode"
  },
  {
    "key": "escape",
    "command": "editor.closeCallHierarchy",
    "when": "callHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "escape",
    "command": "editor.closeTypeHierarchy",
    "when": "typeHierarchyVisible && !config.editor.stablePeek"
  },
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "escape",
    "command": "filesExplorer.cancelCut",
    "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "ctrl+c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  },
  {
    "key": "ctrl+x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "key": "space",
    "command": "filesExplorer.openFilePreserveFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "home",
    "command": "firstCompressedFolder",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "inlineChat.acceptChanges",
    "when": "inlineChatHasProvider && inlineChatVisible && !inlineChatDocumentChanged || inlineChatHasProvider && inlineChatVisible && config.inlineChat.mode != 'preview'"
  },
  {
    "key": "end",
    "command": "lastCompressedFolder",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "delete",
    "command": "moveFileToTrash",
    "when": "explorerResourceMoveableToTrash && filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus && !treeFindOpen"
  },
  {
    "key": "right",
    "command": "nextCompressedFolder",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedLastFocus && !inputFocus"
  },
  {
    "key": "left",
    "command": "previousCompressedFolder",
    "when": "explorerViewletCompressedFocus && filesExplorerFocus && foldersViewVisible && !explorerViewletCompressedFirstFocus && !inputFocus"
  },
  {
    "key": "delete",
    "command": "remote.tunnel.closeInline",
    "when": "tunnelCloseable && tunnelViewFocus"
  },
  {
    "key": "ctrl+c",
    "command": "remote.tunnel.copyAddressInline",
    "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "key": "f2",
    "command": "remote.tunnel.label",
    "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
  },
  {
    "key": "f2",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "f5",
    "command": "workbench.action.debug.continue",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f11",
    "command": "workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "shift+escape",
    "command": "closeReferenceSearch",
    "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
  },
  {
    "key": "escape",
    "command": "closeReferenceSearch",
    "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
  },
  {
    "key": "left",
    "command": "list.stickyScroll.collapse",
    "when": "treestickyScrollFocused"
  },
  {
    "key": "enter",
    "command": "list.stickyScrollselect",
    "when": "treestickyScrollFocused"
  },
  {
    "key": "space",
    "command": "list.stickyScrolltoggleExpand",
    "when": "treestickyScrollFocused"
  },
  {
    "key": "escape",
    "command": "notifications.hideList",
    "when": "notificationCenterVisible"
  },
  {
    "key": "ctrl+alt+right",
    "command": "quickInput.acceptInBackground",
    "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+right",
    "command": "quickInput.acceptInBackground",
    "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+right",
    "command": "quickInput.acceptInBackground",
    "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
  },
  {
    "key": "right",
    "command": "quickInput.acceptInBackground",
    "when": "cursorAtEndOfQuickInputBox && inQuickInput && quickInputType == 'quickPick' || inQuickInput && !inputFocus && quickInputType == 'quickPick'"
  },
  {
    "key": "alt+left",
    "command": "workbench.action.quickInputBack",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+e",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "key": "ctrl+q",
    "command": "workbench.action.quickOpenNavigateNextInViewPicker",
    "when": "inQuickOpen && inViewsPicker"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+e",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+p",
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+shift+r",
    "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
    "when": "inQuickOpen && inRecentFilesPicker"
  },
  {
    "key": "ctrl+shift+q",
    "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
    "when": "inQuickOpen && inViewsPicker"
  },
  {
    "key": "ctrl+r",
    "command": "workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.terminal.searchWorkspace",
    "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.toggleDevTools",
    "when": "isDevelopment"
  },
  {
    "key": "escape",
    "command": "notifications.hideToasts",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "escape",
    "command": "workbench.action.chat.stopListening",
    "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'terminal' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
  },
  {
    "key": "escape",
    "command": "workbench.action.chat.stopReadChatItemAloud",
    "when": "scopedChatSynthesisInProgress"
  },
  {
    "key": "escape",
    "command": "workbench.action.editorDictation.stop",
    "when": "editorDictation.inProgress"
  },
  {
    "key": "escape",
    "command": "workbench.action.speech.stopReadAloud",
    "when": "scopedChatSynthesisInProgress && textToSpeechInProgress"
  },
  {
    "key": "f10",
    "command": "extension.node-debug.startWithStopOnEntry",
    "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
  },
  {
    "key": "ctrl+k ctrl+alt+s",
    "command": "git.stageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "ctrl+shift+v",
    "command": "markdown.showPreview",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "shift+alt+f12",
    "command": "references-view.findReferences",
    "when": "editorHasReferenceProvider"
  },
  {
    "key": "f11",
    "command": "extension.node-debug.startWithStopOnEntry",
    "when": "!inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'node' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && activeViewlet == 'workbench.view.debug' && debugConfigurationType == 'pwa-node'"
  },
  {
    "key": "ctrl+k ctrl+n",
    "command": "git.unstageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "ctrl+k v",
    "command": "markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "f4",
    "command": "references-view.next",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "ctrl+k ctrl+r",
    "command": "git.revertSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "shift+f4",
    "command": "references-view.prev",
    "when": "reference-list.hasResult && references-view.canNavigate"
  },
  {
    "key": "shift+alt+h",
    "command": "references-view.showCallHierarchy",
    "when": "editorHasCallHierarchyProvider"
  },
  {
    "key": "ctrl+enter",
    "command": "github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
  },
  {
    "key": "win+i",
    "command": "inlineChat.startWithCurrentLine",
    "when": "editorFocus && github.copilot.chat.editor.enableLineTrigger && inlineChatHasProvider && !editorReadonly && !inlineChatVisible"
  },
  {
    "key": "ctrl+alt+t",
    "command": "io.orta.jest.editor.run-all-tests",
    "when": "editorLangId =~ /(javascript|javascriptreact|typescript|typescriptreact|vue)/"
  },
  {
    "key": "f",
    "command": "notebook.find",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+enter",
    "command": "python.execSelectionInTerminal",
    "when": "editorTextFocus && !findInputFocussed && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
  },
  {
    "key": "shift+alt+r",
    "command": "remote-wsl.revealInExplorer",
    "when": "editorFocus && remoteName == 'wsl'"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.chat.applyInEditor",
    "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
  },
  {
    "key": "ctrl+enter",
    "command": "workbench.action.chat.insertCodeBlock",
    "when": "accessibleViewInCodeBlock && chatIsEnabled || chatIsEnabled && inChat && !inChatInput"
  },
  {
    "key": "ctrl+i",
    "command": "workbench.action.terminal.chat.start",
    "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+/",
    "command": "github.copilot.acceptCursorPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible && activeWebviewPanelId == 'GitHub Copilot Suggestions'"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+enter",
    "command": "python.execInREPL",
    "when": "config.python.REPL.sendToNativeREPL && editorTextFocus && !accessibilityModeEnabled && !isCompositeNotebook && !jupyter.ownsSelection && !notebookEditorFocused && editorLangId == 'python'"
  },
  {
    "key": "alt+[",
    "command": "github.copilot.previousPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible && activeWebviewPanelId == 'GitHub Copilot Suggestions'"
  },
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "enter",
    "command": "python.execInREPLEnter",
    "when": "!config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && activeEditor == 'workbench.editor.repl'"
  },
  {
    "key": "alt+]",
    "command": "github.copilot.nextPanelSolution",
    "when": "github.copilot.activated && github.copilot.panelVisible && activeWebviewPanelId == 'GitHub Copilot Suggestions'"
  },
  {
    "key": "a",
    "command": "notebook.cell.insertCodeCellAboveAndFocusContainer",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "enter",
    "command": "python.execInInteractiveWindowEnter",
    "when": "!config.interactiveWindow.executeWithShiftEnter && !inlineChatFocused && activeEditor == 'workbench.editor.interactive'"
  },
  {
    "key": "alt+\\",
    "command": "editor.action.inlineSuggest.trigger",
    "when": "config.github.copilot.inlineSuggest.enable && editorTextFocus && !editorHasSelection && !inlineSuggestionsVisible"
  },
  {
    "key": "b",
    "command": "notebook.cell.insertCodeCellBelowAndFocusContainer",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+r",
    "command": "python.refreshTensorBoard",
    "when": "python.hasActiveTensorBoardSession"
  },
  {
    "key": "d d",
    "command": "notebook.cell.delete",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "z",
    "command": "undo",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "s",
    "command": "workbench.action.files.save",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "c",
    "command": "notebook.cell.copy",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "x",
    "command": "notebook.cell.cut",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "v",
    "command": "notebook.cell.paste",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "shift+l",
    "command": "notebook.toggleLineNumbers",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "o",
    "command": "notebook.cell.toggleOutputs",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "l",
    "command": "notebook.cell.toggleLineNumbers",
    "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+shift+-",
    "command": "notebook.cell.split",
    "when": "editorTextFocus && inputFocus && notebookEditorFocused && !notebookOutputInputFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.executeAndFocusContainer",
    "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
  },
  {
    "key": "shift+enter",
    "command": "notebook.cell.executeAndSelectBelow",
    "when": "notebookCellListFocused && !interactiveEditorFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused && !interactiveEditorFocused"
  },
  {
    "key": "ctrl+alt+enter",
    "command": "interactive.acceptChanges",
    "when": "interactiveEditorHasProvider && interactiveEditorVisible && !interactiveEditorDocumentChanged || interactiveEditorHasProvider && interactiveEditorVisible && config.interactiveEditor.editMode != 'preview'"
  },
  {
    "key": "ctrl+.",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "enter",
    "command": "acceptSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "shift+escape",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "escape",
    "command": "hideCodeActionWidget",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+enter",
    "command": "previewSelectedCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+down",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "down",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+up",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "up",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "escape",
    "command": "diffEditor.exitCompareMove",
    "when": "comparingMovedCode"
  }
]
