# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - typeagent

on:
  push:
    branches:
      - dev/robgruen/android_sans_MSAL
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build_ts:        
    env:
      NODE_OPTIONS: "--max_old_space_size=8192"
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        #os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        #version: [18, 20]
        version: [20]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Git LF
        run: |
          git config --global core.autocrlf false
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            ts:
              - "ts/**"
              - ".github/workflows/build-ts.yml"
      - uses: pnpm/action-setup@v4
        if: ${{ github.event_name != 'pull_request' || steps.filter.outputs.ts == 'true' }}
        name: Install pnpm
        with:
          version: 9
          run_install: false
      - uses: actions/setup-node@v4
        if: ${{ github.event_name != 'pull_request' || steps.filter.outputs.ts == 'true' }}
        with:
          node-version: ${{ matrix.version }}
          cache: "pnpm"
          cache-dependency-path: ts/pnpm-lock.yaml
      - name: Install dependencies
        if: ${{ github.event_name != 'pull_request' || steps.filter.outputs.ts == 'true' }}
        working-directory: ts
        run: |
          pnpm install --frozen-lockfile --strict-peer-dependencies
      - name: Build
        if: ${{ github.event_name != 'pull_request' || steps.filter.outputs.ts == 'true' }}
        working-directory: ts
        run: |
          npm run build
      - name: Test
        if: ${{ github.event_name != 'pull_request' || steps.filter.outputs.ts == 'true' }}
        working-directory: ts
        run: |
          npm run test
      - name: Lint
        if: ${{ github.event_name != 'pull_request' || steps.filter.outputs.ts == 'true' }}
        working-directory: ts
        run: |
          npm run lint   
      # - name: Upload artifact for deployment job
      #   uses: actions/upload-artifact@v4.4.3
      #   with:
      #     name: node-app
      #     path: |
      #       ./ts/packages/api
      #       .ts/packages/shell
      #     compression-level: 0

  deploy:
    runs-on: windows-latest
    needs: build_ts
    # environment:
    #   name: 'test'
    #   url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    # permissions:
    #   id-token: write #This is required for requesting the JWT    
    steps: 
      - name: Build and push Docker images
        # You may pin to the exact commit or the version.
        # uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        uses: docker/build-push-action@v6.9.0
        # with:
        #   # List of a customs host-to-IP mapping (e.g., docker:10.180.0.1)
        #   add-hosts: # optional
        #   # List of extra privileged entitlement (e.g., network.host,security.insecure)
        #   allow: # optional
        #   # List of annotation to set to the image
        #   annotations: # optional
        #   # List of attestation parameters (e.g., type=sbom,generator=image)
        #   attests: # optional
        #   # List of build-time variables
        #   build-args: # optional
        #   # List of additional build contexts (e.g., name=path)
        #   build-contexts: # optional
        #   # Builder instance
        #   builder: # optional
        #   # List of external cache sources for buildx (e.g., user/app:cache, type=local,src=path/to/dir)
        #   cache-from: # optional
        #   # List of cache export destinations for buildx (e.g., user/app:cache, type=local,dest=path/to/dir)
        #   cache-to: # optional
        #   # Optional parent cgroup for the container used in the build
        #   cgroup-parent: # optional
        #   # Build's context is the set of files located in the specified PATH or URL
        #   context: # optional
        #   # Path to the Dockerfile
        #   file: # optional
        #   # List of metadata for an image
        #   labels: # optional
        #   # Load is a shorthand for --output=type=docker
        #   load: # optional, default is false
        #   # Set the networking mode for the RUN instructions during build
        #   network: # optional
        #   # Do not use cache when building the image
        #   no-cache: # optional, default is false
        #   # Do not cache specified stages
        #   no-cache-filters: # optional
        #   # List of output destinations (format: type=local,dest=path)
        #   outputs: # optional
        #   # List of target platforms for build
        #   platforms: # optional
        #   # Generate provenance attestation for the build (shorthand for --attest=type=provenance)
        #   provenance: # optional
        #   # Always attempt to pull all referenced images
        #   pull: # optional, default is false
        #   # Push is a shorthand for --output=type=registry
        #   push: # optional, default is false
        #   # Generate SBOM attestation for the build (shorthand for --attest=type=sbom)
        #   sbom: # optional
        #   # List of secrets to expose to the build (e.g., key=string, GIT_AUTH_TOKEN=mytoken)
        #   secrets: # optional
        #   # List of secret env vars to expose to the build (e.g., key=envname, MY_SECRET=MY_ENV_VAR)
        #   secret-envs: # optional
        #   # List of secret files to expose to the build (e.g., key=filename, MY_SECRET=./secret.txt)
        #   secret-files: # optional
        #   # Size of /dev/shm (e.g., 2g)
        #   shm-size: # optional
        #   # List of SSH agent socket or keys to expose to the build
        #   ssh: # optional
        #   # List of tags
        #   tags: # optional
        #   # Sets the target stage to build
        #   target: # optional
        #   # Ulimit options (e.g., nofile=1024:1024)
        #   ulimit: # optional
        #   # GitHub Token used to authenticate against a repository for Git context
        #   github-token: # optional, default is ${{ github.token }}
                

    # steps:
    #   - name: Download artifact from build job
    #     uses: actions/download-artifact@v4.1.8
    #     with:
    #       name: node-app
      
    #   - name: Login to Azure
    #     uses: azure/login@v2.2.0
    #     with:
    #       client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_5B0D2D6BA40F4710B45721D2112356DD }}
    #       tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_39BB903136F14B6EAD8F53A8AB78E3AA }}
    #       subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F36C1F2C4B2C49CA8DD5C52FAB98FA30 }}          

    #   - name: 'Deploy to Azure Web App'
    #     uses: azure/webapps-deploy@v3.0.1
    #     id: deploy-to-webapp
    #     with:
    #       app-name: 'typeagent'
    #       slot-name: 'test'
    #       package: .
          
