# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

resources:
  repositories:
    - repository: TypeAgent-GH
      type: github
      endpoint: AI_Systems
      name: microsoft/typeagent
      ref: refs/heads/main

trigger:
  branches:
    include:
      - main

pr:
  branches:
    exclude:
      - "*"

variables:
  workingDirectory: "ts"
  shell_folder: "ts/packages/shell"
  nodeVersion: "22"

jobs:
  - job: build_ts
    displayName: "Build TypeScript Project"
    strategy:
      matrix:
        windows:
          image: "windows-latest"
        linux:
          image: "ubuntu-latest"
    pool:
      vmImage: "$(image)"
    steps:
      - script: |
          sudo apt install libsecret-1-0
        displayName: "Install libsecret-1-0"
        condition: eq(variables['Agent.OS'], 'Linux')

      - checkout: TypeAgent-GH
        displayName: "Checkout TypeAgent Repository"
        path: "typeagent"

      - task: UseNode@1
        displayName: "Setup Node.js"
        inputs:
          version: $(nodeVersion)
          checkLatest: true

      - template: include-install-pnpm.yml
        parameters:
          buildDirectory: $(Build.SourcesDirectory)/ts

      - script: |
          pnpm install --frozen-lockfile --strict-peer-dependencies
        displayName: "Install dependencies"
        workingDirectory: $(workingDirectory)

      - script: |
          current_version=$(node -p "require('./package.json').version")
          new_version="${current_version}-$(Build.BuildId)"
          echo "##vso[task.setvariable variable=package_version]$new_version"
          jq ".version=\"$new_version\"" package.json > package.tmp.json
          mv package.tmp.json package.json
          echo "Updated package.json to version $new_version"
          cat package.json
        displayName: "Update Package Version"
        workingDirectory: $(shell_folder)

      - script: |
          pnpm run build:shell
        displayName: "Build"
        workingDirectory: $(workingDirectory)

      - bash: |
          if [[ $RUNNER_OS == 'Linux' ]]; then
            tar -czf shell.tar.gz shell
          elif [[ $RUNNER_OS == 'Windows' ]]; then
            powershell Compress-Archive -Path shell -DestinationPath shell.zip
          elif [[ $RUNNER_OS == 'macOS' ]]; then
            tar -czf shell.tar.gz shell
          fi
        displayName: "Package - shell"
        workingDirectory: $(workingDirectory)

      - publish: dist
        displayName: "Publish"
        artifact: "shell"
        workingDirectory: $(shell_folder)
