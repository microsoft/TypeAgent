# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

trigger:
  branches:
    include:
      - main

pr:
  branches:
    exclude:
      - "*"

parameters:
  - name: platforms
    type: object
    default: [win, linux, mac]
  - name: channel
    type: string
    default: ci
    values:
      - ci
      - lkg
      - test

variables:
  workingDirectory: ts
  shell_folder: ts/packages/shell
  nodeVersion: 22

jobs:
  - job: build_package_shell
    displayName: Build TypeAgent Shell
    strategy:
      matrix:
        windows:
          image: windows-latest
          platform: win
        linux:
          image: ubuntu-latest
          platform: linux
        mac:
          image: macos-latest
          platform: mac
    pool:
      vmImage: $(image)
    steps:
      - checkout: self
        displayName: Checkout TypeAgent Repository
        path: "typeagent"

      - task: UseNode@1
        displayName: Setup Node.js
        inputs:
          version: $(nodeVersion)
          checkLatest: true

      - template: include-install-pnpm.yml
        parameters:
          buildDirectory: $(Build.SourcesDirectory)/ts

      - script: |
          pnpm install --frozen-lockfile --strict-peer-dependencies
        displayName: "Install dependencies"
        workingDirectory: $(workingDirectory)

      - template: include-update-package-version.yml
        parameters:
          packageFolder: $(shell_folder)
          prerelease: ${{ parameters.channel }}.$(Build.BuildNumber)

      - script: |
          pnpm run build:shell
        displayName: Build Shell
        workingDirectory: $(workingDirectory)

      - script: |
          pnpm run shell:package:$(platform)
        displayName: Package - shell
        workingDirectory: $(workingDirectory)

      - publish: $(shell_folder)/dist
        displayName: Upload Artifact
        artifact: shell-$(platform)

  - deployment: publish
    displayName: Publish TypeAgent Shell
    environment: typeagent-shell-${{ parameters.channel }}
    dependsOn: build_package_shell
    pool:
      # AzureFileCopy requires windows
      vmImage: windows-latest
    strategy:
      runOnce:
        deploy:
          steps:
            - ${{ each platform in parameters.platforms }}:
                - download: current
                  artifact: shell-${{ platform }}
                  displayName: Download shell package - ${{ platform }}
                  patterns: |
                    [Tt]ype[Aa]gent[- ]shell[-_]*
                    ${{ parameters.channel }}*.yml
                  condition: succeeded()

                - task: AzureFileCopy@6
                  displayName: Upload Azure Storage - ${{ platform }}
                  inputs:
                    SourcePath: $(Pipeline.Workspace)\shell-${{ platform }}\**
                    Destination: AzureBlob
                    azureSubscription: $(azureSubscription)
                    storage: $(azureStorageAccountName)
                    ContainerName: $(azureStorageContainerName)
                  condition: succeeded()
